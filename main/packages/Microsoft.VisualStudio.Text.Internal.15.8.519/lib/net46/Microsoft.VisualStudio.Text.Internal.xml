<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Text.Internal</name>
    </assembly>
    <members>
        <member name="P:Microsoft.VisualStudio.Text.Internal.Language.CompletionPresenterStylePrivate.TabItemSeparatorBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the border/separator between completion tabs.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Internal.Language.CompletionPresenterStylePrivate.TabItemSelectedTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of a completion tab item when it is
            selected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Internal.Language.CompletionPresenterStylePrivate.ThemeImage(System.Windows.Media.ImageSource,System.Windows.Media.Color)">
            <summary>
            Creates a modified image which is themed to match the target background color for the
            completion UI.  The icon may be modified to improve its appearance regardless of
            whether or not the background is dark or light.
            </summary>
            <param name="sourceImage">The source image to theme.</param>
            <param name="backgroundColor">The background color which the image
            should be targeted to look good on.</param>
            <returns>A derivative work of the original source image, or a reference
            to the source image if theming is not supported or required.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.OverviewMargin.Test.IOverviewMargin_Test">
            <summary>
            Test contract for the OverviewMargin (use host.GetTextViewMargin(PredefinedMarginNames.VerticalScrollBar) as IOverviewMargin_Test)
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.OverviewMargin.Test.IOverviewMargin_Test.TipWindow">
            <summary>
            Get the preview tip window (if open, returns null otherwise).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.OverviewMargin.Test.IOverviewMarkMargin_Test">
            <summary>
            Test contract for the OverviewMarkMargin (use host.GetTextViewMargin(PredefinedMarginNames.OverviewMark) as IOverviewMarkMargin_Test).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.OverviewMargin.Test.IOverviewMarkMargin_Test.GetMarks">
            <summary>
            Get a list of all marks being drawn by the margin.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ExtensionMethods.IndexOfNextNonWhiteSpaceCharacter(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32)">
            <summary>
            Find the index of the next non-whitespace character in a line.
            </summary>
            <param name="line">The line to search.</param>
            <param name="startIndex">The index at which to begin the search, relative to the start of the line.</param>
            <returns>The index, relative to the start of the line, of the first non-whitespace character whose index 
            is <paramref name="startIndex"/> or greater, or -1 if there are not any non-whitespace characters at that index or greater.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> if <paramref name="startIndex"/> is negative.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ExtensionMethods.IndexOfPreviousNonWhiteSpaceCharacter(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Int32)">
            <summary>
            Find the index of the previous non-whitespace character in a line.
            </summary>
            <param name="line">The line to search.</param>
            <param name="startIndex">The index at which to begin the search, relative to the start of the line.</param>
            <returns>The index, relative to the start of the line, of the first non-whitespace character whose index 
            is <paramref name="startIndex"/> or greater, or -1 if there are not any non-whitespace characters at that index or greater.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"> if <paramref name="startIndex"/> is negative.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.INonJoinableTaskTrackerInternal">
            <summary>
            Internal tracker for non-joinable tasks. Used to ensure that all pending tasks
            have completed on editor host shutdown.
            </summary>
            <remarks>Methods of this interface can be called on any thread.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextBufferFactoryService2">
            <summary>
            The factory service for ordinary TextBuffers.
            </summary>
            <remarks><para>This is a MEF Component, and should be imported as follows:
            <code>
            [Import]
            ITextBufferFactoryService factory = null;
            </code>
            </para>
            <para>Any <see cref="T:Microsoft.VisualStudio.Text.ITextBufferFactoryService"/> will be upcastable to an <see cref="T:Microsoft.VisualStudio.Text.ITextBufferFactoryService2"/>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService2.CreateTextBuffer(Microsoft.VisualStudio.Text.SnapshotSpan,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the specified <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> and populates it 
            with the given text contained in <paramref name="span"/>.
            </summary>
            <param name="span">The initial text to add.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object with the given text and <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">Either <paramref name="span"/> or <paramref name="contentType"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextBufferFactoryService2.CreateTextBuffer(System.IO.TextReader,Microsoft.VisualStudio.Utilities.IContentType,System.Int64,System.String)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with the given <paramref name="contentType"/> and populates it by 
            reading data from the specified TextReader.
            </summary>
            <param name="reader">The TextReader from which to read.</param>
            <param name="contentType">The <paramref name="contentType"/> for the text contained in the new <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/></param>
            <param name="length">The length of the file backing the text reader, if known; otherwise -1.</param>
            <param name="traceId">An optional identifier used in debug tracing.</param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> object with the given TextReader and <paramref name="contentType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="reader"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="contentType"/> is null.</exception>
            <remarks>
            <para>The <paramref name="reader"/> is not closed by this operation.</para>
            <para>The <paramref name="length"/> is used to help select a storage strategy for the text buffer.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.ITextImageFactoryService2">
            <summary>
            The factory service for creating <see cref="T:Microsoft.VisualStudio.Text.ITextImage"/>s.
            </summary>
            <remarks>This is a MEF Component, and should be imported as follows:
            <code>
            [Import]
            ITextImageFactoryService factory = null;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.ITextImageFactoryService2.CreateTextImage(System.IO.MemoryMappedFiles.MemoryMappedFile)">
            <summary>
            Create an <see cref="T:Microsoft.VisualStudio.Text.ITextImage"/> from a memory mapped file.
            </summary>
            <param name="source">A utf-16 encoded image of the file.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.ITextImage"/> that is mapped to the contents of <paramref name="source"/>.</returns>
            <remarks>
            <para><paramref name="source"/> must be encoded as utf-16.</para>
            <para>Any <see cref="T:Microsoft.VisualStudio.Text.ITextImage"/> created from <paramref name="source"/> be invalidated if <paramref name="source"/> is either
            modified or disposed of.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2">
            <summary>
            A virtualized data collection that can be used to create wrapper objects on-demand.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.#ctor(`0,System.Int32,Microsoft.VisualStudio.Text.Utilities.WrapperCreator{`0,`1})">
            <summary>
            Constructs a virtualized list over an underlying data object.
            </summary>
            <param name="underlyingDataObject">The underlying object over which wrappers will be created.</param>
            <param name="dataObjectCount">
            The number of "items" in the underlying object.  Also the number of wrappers to be created.
            </param>
            <param name="wrapperCreator">
            A delegate that will create wrapper objects given an index into the underlying object.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.IndexOf(`1)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>.</param>
            <returns>The index of item if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Insert(System.Int32,`1)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when called.  The <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.RemoveAt(System.Int32)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when called.  The <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.  Although the set accessor is defined, it will throw an
            <see cref="T:System.InvalidOperationException"/> when called, as the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Add(System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when called.  The <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>.</param>
            <returns>The index of value if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Insert(System.Int32,System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when called.  The <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.InvalidOperationException"/> has a fixed size.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Remove(System.Object)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when called.  The <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets the element at the specified index.  Although the set accessor is defined, it will throw an
            <see cref="T:System.InvalidOperationException"/> when called, as the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> to an <see cref="T:System.Array"/>, starting at a
            particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from
            the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
            </param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Add(`1)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when called.  The <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Clear">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when called.  The <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Contains(`1)">
            <summary>
            Determines whether the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> contains a specific value.
            </summary>
            <param name="item">The value to locate in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>.</param>
            <returns>
            true if the value is found in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.CopyTo(`1[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">
            The one-dimensional array that is the destination of the elements copied from the
            <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>. The array must have zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Remove(`1)">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> when called.  The <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is read-only.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IEnumerator"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.CollectionChanged">
            <summary>
            Raised when the set of items in the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> changes.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.Dispose">
            <summary>
            Disposes and releases all wrappers created.  Also releases all references to the underlying object
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.GetWrapper(System.Int32)">
            <summary>
            Gets a wrapper object over the underlying object for the specified index.
            </summary>
            <param name="index">The index for which to obtain a wrapper</param>
            <returns>A valid wrapper object for the specified index.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.SetUnderlyingDataObject(`0,System.Int32)">
            <summary>
            Sets the underlying data object over which this <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> generates
            wrapper objects.
            </summary>
            <param name="newDataObject">The underlying data object over which to generate wrappers.</param>
            <param name="count">The number of items in the underlying object</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.NotifyUnderlyingObjectChanged">
            <summary>
            Notifies the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> that the underlying object over which the
            <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> is based has changed.
            </summary>
            <remarks>
            When the underlying object changes, the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/> resets its wrapper
            collection and raises its INotifyCollectionChanged.CollectionChanged event.  The next time wrappers are requested from
            the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2"/>, the wrappers will be re-generated.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.LazyObservableCollectionEnumerator.#ctor(Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection{`0,`1})">
            <summary>
            Creates an instance of the <see cref="T:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.LazyObservableCollectionEnumerator"/> class.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.LazyObservableCollectionEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.LazyObservableCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.LazyObservableCollectionEnumerator.Dispose">
            <summary>
            Releases all references to the collection being iterated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.LazyObservableCollectionEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of
            the collection.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.LazyObservableCollection`2.LazyObservableCollectionEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1">
            <summary>
            Holds a well-formed tree of tracking spans and correlated items, for tracking the position and movement
            of spans over time.  Allows for efficient addition, removal, and searching over the tree, with methods for
            searching for intersection and containment over both <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> and <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>
            arguments.  The search results are returned pre-order (so parents before children, children closest to the start of the buffer first).
            </summary>
            <remarks>
            <para>
            Well-formed means the relationship between all spans is either non-overlapping (siblings) or
            containment (parent-child), so there can be no partially overlapping spans.
            </para>
            <para>
            The only tracking mode that can be safely used is <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeExclusive"/>, as the other tracking modes
            can result in overlapping spans as the buffer changes.
            </para>
            </remarks>
            <typeparam name="T">The type of object that each span correlates to.</typeparam>
            <comment>This is used by the outlining manager to store collapsed regions and the outlining shims to store all hidden region adapters.</comment>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.#ctor(Microsoft.VisualStudio.Text.ITextBuffer,System.Boolean)">
            <summary>
            Create a tracking span tree for the given buffer.
            </summary>
            <param name="buffer">The buffer that all the spans in this tree are in.</param>
            <param name="keepTrackingCurrent">The tree should not allow tracking spans to point
            to old versions, at the expense of walking the tree on every text change.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.TryAddItem(`0,Microsoft.VisualStudio.Text.ITrackingSpan)">
            <summary>
            Try to add an item to the tree with the given tracking span.
            </summary>
            <param name="item">The item to add to the tree.</param>
            <param name="trackingSpan">The tracking span it is associated with.</param>
            <returns>The newly added node, if the item was successfully added; <c>null</c> if adding the item to the tree would
            violate the well-formedness of the tree.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="trackingSpan"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">If the tracking mode of <paramref name="trackingSpan"/> is not <see cref="F:Microsoft.VisualStudio.Text.SpanTrackingMode.EdgeExclusive"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.RemoveItem(`0,Microsoft.VisualStudio.Text.ITrackingSpan)">
            <summary>
            Remove an item from the tree.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="trackingSpan">The span the item was located at.</param>
            <returns><c>true</c> if the item was removed, <c>false</c> if it wasn't found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.Clear">
            <summary>
            Remove all nodes from the tree.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.FindNodesIntersecting(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Find nodes that intersect the given span.
            </summary>
            <param name="span">The span to search.</param>
            <returns>Nodes that intersect the given span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.FindNodesIntersecting(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Find nodes that intersect the given collection of spans (nodes that intersect more than one of the
            spans are only returned once).
            </summary>
            <param name="spans">The collection of spans to search.</param>
            <returns>Nodes that intersect the given collection of spans.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.FindTopLevelNodesIntersecting(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Find nodes that intersect the given span that are at the top level of the tree (have no parent nodes).
            </summary>
            <param name="span">The span to search.</param>
            <returns>Nodes that are toplevel and intersect the given span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.FindTopLevelNodesIntersecting(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Find nodes that intersect the given collection of spans that are at the top level of the tree (have no parent nodes).
            </summary>
            <param name="spans">The collection of spans to search.</param>
            <returns>Nodes that are toplevel and intersect the given collection of spans.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.FindNodesContainedBy(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Find nodes that are contained completely by the given span.
            </summary>
            <param name="span">The span to search.</param>
            <returns>Nodes that are contained completely by the given span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.FindNodesContainedBy(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Find nodes that are contained completely by the given collection of spans.
            </summary>
            <param name="spans">The collection of spans to search.</param>
            <returns>Nodes that are contained completely by the given collection of spans.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.FindTopLevelNodesContainedBy(Microsoft.VisualStudio.Text.SnapshotSpan)">
            <summary>
            Find nodes that are contained completely by the given span that are at the top level of the tree (have no parent nodes).
            </summary>
            <param name="span">The span to search.</param>
            <returns>Nodes that are toplevel and are contained completely by the given span.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.FindTopLevelNodesContainedBy(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection)">
            <summary>
            Find nodes that are contained completely by the given collection of spans that are at the top level of the tree (have no parent nodes).
            </summary>
            <param name="spans">The collection of spans to search.</param>
            <returns>Nodes that are toplevel and are contained completely by the given collection of spans.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.IsPointContainedInANode(Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Check if a given point is contained inside of a node (so the point is between the start and end points of a node).
            </summary>
            <param name="point">The point to check.</param>
            <returns><c>true</c> if the poin is inside a node.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.TrackingSpanTree`1.IsNodeTopLevel(Microsoft.VisualStudio.Text.Utilities.TrackingSpanNode{`0})">
            <summary>
            Check if a given node is a toplevel node (has no parents).
            </summary>
            <param name="node">The node to check.</param>
            <returns><c>true</c> if the node has no parent node.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.TrackingSpanNode`1">
            <summary>
            A node in the tracking span tree.  A node contains a data item, an associated tracking span,
            and a (possibly empty) list of children, which can be modified as items are inserted and removed into the tree.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.LineBuffer">
            <summary>
            This is a little buffer over the contents of a line, so that we avoid fetching the entirety of giant lines when we really
            just need to look at a small local area.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.LineBuffer.contents">
            <summary>
            Current window into the line. Size is less than or equal to BufferSize.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.LineBuffer.extent">
            <summary>
            Bounds of the current contents, 0-origin with respect to the line.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.UnicodeWordExtent.IsWholeWord(Microsoft.VisualStudio.Text.SnapshotSpan,System.Boolean)">
            <summary>
            Logic from vscommon\unilib\uniword.cpp
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.IExperimentationServiceInternal">
            <summary>
            Service for querying the status of A/B experiments.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.IExperimentationServiceInternal.IsCachedFlightEnabled(System.String)">
            <summary>
            Checks whether or not the flight is enabled for this user.
            </summary>
            <param name="flightName">A name of a flight, up to 16 characters long.</param>
            <returns>True if this user has the specific flight enabled.</returns>
            <remarks>
            This method uses cached flighting results, meaning, that this method does not
            block to download flight membership data, but rather, returns false if the data
            is not yet available.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.ILoggingServiceInternal">
            <summary>
            Allows code in VS-Platform to log events.
            </summary>
            <remarks>
            For example, the VS Provider of this inserts data points into the telemetry data stream.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.ILoggingServiceInternal.PostEvent(System.String,System.Object[])">
            <summary>
            Post the event named <paramref name="key"/> to the telemetry stream. Additional properties can be appended as name/value pairs in <paramref name="namesAndProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.ILoggingServiceInternal.PostEvent(System.String,System.Collections.Generic.IReadOnlyList{System.Object})">
            <summary>
            Post the event named <paramref name="key"/> to the telemetry stream. Additional properties can be appended as name/value pairs in <paramref name="namesAndProperties"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.ILoggingServiceInternal.PostFault(System.String,System.String,System.Exception,System.String,System.Nullable{System.Boolean})">
            <summary>
            Creates and posts a FaultEvent.
            </summary>
            <param name="eventName">
            An event name following data model schema.
            It requires that event name is a unique, not null or empty string.
            It consists of 3 parts and must follows pattern [product]/[featureName]/[entityName]. FeatureName could be a one-level feature or feature hierarchy delimited by "/".
            For examples,
            vs/platform/opensolution;
            vs/platform/editor/lightbulb/fixerror;
            </param>
            <param name="description">Fault description</param>
            <param name="exceptionObject">Exception instance</param>
            <param name="additionalErrorInfo">Additional information to be added to Watson's ErrorInformation.txt file.</param>
            <param name="isIncludedInWatsonSample">
            Gets or sets a value indicating whether we sample this event locally. Affects Watson only.
            If false, will not send to Watson: only sends the telemetry event to AI and doesn't call callback.
            Changing this will force the event to send to Watson. Be careful because it can have big perf impact.
            If unchanged, it will be set according to the default sample rate.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.ILoggingServiceInternal.AdjustCounter(System.String,System.String,System.Int32)">
            <summary>
            Adjust the counter associated with <paramref name="key"/> and <paramref name="name"/> by <paramref name="delta"/>.
            </summary>
            <remarks>
            <para>Counters start at 0.</para>
            <para>No information is sent over the wire until the <see cref="M:Microsoft.VisualStudio.Text.Utilities.ILoggingServiceInternal.PostCounters"/> is called.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.ILoggingServiceInternal.PostCounters">
            <summary>
            Post all of the counters.
            </summary>
            <remarks>
            <para>The counters are logged as if PostEvent had been called for each key with a list counter names and values.</para>
            <para>The counters are cleared as a side-effect of this call.</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.IPerformanceMarkerBlockProvider">
            <summary>
            Allows marking actions for performance logging.
            </summary>
            <remarks>
            For example, the VS editor adapters return MeasurementBlock instances
            that log ETW events.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.PriorityAttribute">
            <summary>
            An attribute used to indicate the priority of a named MEF import. If two imports have
            the same name, then the one with the higher priority wins,
            </summary>
            <remarks><para>Currently used only by the EditorFormatMap imports.</para>
            <para>Default priority is 0 and negative priorities are allowed.</para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Text.Utilities.PriorityAttribute"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Utilities.PriorityAttribute.Priority">
            <summary>
            Gets the priority of the export (where an export with the same name and a lower priority will be
            suppressed by the export with a higher priority).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.TelemetryComplexProperty">
            <summary>
            Allows code in VS-Platform to use complex telemetry properties, which reduce boilerplate code.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.TelemetryEventType">
            <summary>
            Supported telemetry event types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryEventType.UserTask">
            <summary>
            User task event
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryEventType.Trace">
            <summary>
            Trace event
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryEventType.Operation">
            <summary>
            Operation event
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryEventType.Fault">
            <summary>
            Fault event
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryEventType.Asset">
            <summary>
            Asset event
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.TelemetryResult">
            <summary>
            An enum to define the result from user task or operation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryResult.None">
            <summary>
            Used for unknown or unavailable result.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryResult.Success">
            <summary>
            A result without any failure from product or user.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryResult.Failure">
            <summary>
            A result to indicate the action/operation failed because of product issue (not user faults)
            Consider using FaultEvent to provide more details about the failure.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryResult.UserFault">
            <summary>
            A result to indicate the action/operation failed because of user fault (e.g., invalid input).
            Consider using FaultEvent to provide more details.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Utilities.TelemetryResult.UserCancel">
            <summary>
            A result to indicate the action/operation is cancelled by user.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Utilities.IFormattedLineSource2">
            <summary>
            Generates formatted line from text snapshots.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.IFormattedLineSource2.FormatLineInVisualBuffer(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Formats the text and adornments in a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>.
            </summary>
            <param name="visualLine">The line to format.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> used to indicate when to give up on doing accurate colorization. null indicates that colorization should be done using the inaccurate versions of the
            classifier that return results quickly (even if they are inaccurate) and correct any errors once accurate results have been calculated.</param>
            <returns>The formatted text for that line.</returns>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLine"/> objects are <see cref="T:System.IDisposable"/>. The caller must explicitly call Dispose() on the returned lines when they are
            done with them.
            </para>
            <para>
            The supplied <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> must belong to the snapshot of the visual buffer, since visuals 
            live on that buffer.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Utilities.IFormattedLineSource2.FormatLineInVisualBufferIfChanged(Microsoft.VisualStudio.Text.ITextSnapshotLine,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.Formatting.IFormattedLine},System.Nullable{System.Threading.CancellationToken})">
            <summary>
            Formats the text and adornments in a <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> if and only if the text properties have changed.
            </summary>
            <param name="visualLine">The line to format.</param>
            <param name="oldLines">Previously formatted line(s) for <paramref name="visualLine"/>.</param>
            <param name="cancellationToken"><see cref="T:System.Threading.CancellationToken"/> used to indicate when to give up on doing accurate colorization. null indicates that colorization should be done using the inaccurate versions of the
            classifier that return results quickly (even if they are inaccurate) and correct any errors once accurate results have been calculated.</param>
            <returns>null if the text properties for <paramref name="visualLine"/> haven't changed; the newly formatted text for that line otherwise.</returns>
            <remarks>
            <para>
            <see cref="T:Microsoft.VisualStudio.Text.Formatting.IFormattedLine"/> objects are <see cref="T:System.IDisposable"/> and must be disposed explicitly.
            </para>
            <para>
            The supplied <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> must belong to the snapshot of the visual buffer, since visuals 
            live on that buffer.
            </para>
            <para>
            This method should only be used if you know that there have been no changes to <paramref name="visualLine"/>'s text or space negotiating adornments.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferOperationHelpers.HasAnyNonWhitespaceCharacters(Microsoft.VisualStudio.Text.ITextSnapshotLine)">
            <summary>
            Checks if the given <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> has any non-whitespace characters
            </summary>
            <param name="line">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> on which the check is performed</param>
            <returns>True if the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/>  contains any non-whitespace characters</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferOperationHelpers.GetNewLineCharacterToInsert(Microsoft.VisualStudio.Text.ITextSnapshotLine,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            For a given <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> gets the new line character to be inserted to the line based on
            either the given line, or the second last line or the default new line charcter provided by <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/>
            </summary>
            <param name="line">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> for whcih the new line character is to be decied for</param>
            <param name="editorOptions">The current set of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> applicable for the given <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/></param>
            <returns>The new line character to be inserted</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.TextBufferOperationHelpers.TryInsertFinalNewLine(Microsoft.VisualStudio.Text.ITextBuffer,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Inserts a final new line for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> based on 
            whether the option to insert it is enabled in the current set of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> applicable to the buffer
            </summary>
            <param name="buffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> in which the final new line has to be inserted in</param>
            <param name="editorOptions">The current set of <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> applicable to the buffer</param>
            <returns>Whether the operation on the buffer succeded or not</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ExpandContractSelectionOptions">
            <summary>
            Options applicable to Expand and Contract Selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Operations.ExpandContractSelectionOptions.ExpandContractSelectionEnabledOptionId">
            <summary>
            The option that determines whether or not expand and contract selection is enable for a particular language.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.IEditOnlyTextUndoPrimitive">
            <summary>
            Represents undo primitive that consists only of text changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator2">
            <summary>
            Provides a service to navigate between search results on a <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> and to
            perform replacements.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchNavigator2.SearchSpans">
            <summary>
            Indicates the ranges that should be searched (if any).
            </summary>
            <remarks>
            If this value to a non-null value will effectively override the ITextSearchNavigator.SearchSpan property.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchResultTag">
            <summary>
            Represents search results that are provided by a search tagger.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchResultTag"/> is present such that all consumers of search matches have a common way of obtaining the matches.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1">
             <summary>
             A tagger that tags contents of a buffer based on the search terms that are passed to the object. To
             obtain an implementation of this interface, import the <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTaggerFactoryService"/>
             via the Managed Extensibility Framework.
             </summary>
             <remarks>
             <para>
             All search operations are performed on a low priority background thread and on demand.
             </para>
             <para>
             In order for this tagger to be consumed by the editor, a corresponding <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider"/>
             that provides an instance of this tagger must be exported through the Managed Extensibility Framework.
             </para>
             </remarks>
             <example>
             <code>
             [Export]
             [TagType(typeof(T))]
             [ContentType("any")]
             class TaggerProvider : ITaggerProvider
             {
                 [Import]
                 ITextSearchTaggerFactoryService searchTaggerFactory;
                 
                 #region ITaggerProvider Members
            
                 public ITagger&lt;T&gt; CreateTagger&lt;T&gt;(Microsoft.VisualStudio.Text.ITextBuffer buffer) where T : ITag
                 {
                     ITextSearchTagger&lt;T&gt; tagger = searchTaggerFactory.CreateTextSearchTagger&lt;T&gt;(buffer);
                     
                     tagger.TagTerm(...);
                     
                     return tagger as ITagger&lt;T&gt;;
                 }
            
                 #endregion
             }
             </code>
             </example>
             <typeparam name="T">
             A derivative of <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITag"/>.
             </typeparam>
             <remarks>
             The <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1"/> expects to be queried for monotonically increasing snapshot versions. If a query
             is made in the reverse order, the results returned by the tagger for older versions might differ from the results 
             obtained originally for those versions.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1.SearchSpans">
            <summary>
            Limits the scope of the tagger to the provided <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </summary>
            <remarks>
            If the value is set to <c>null</c> the entire range of the buffer will be searched.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1.TagTerm(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,System.Func{Microsoft.VisualStudio.Text.SnapshotSpan,`0})">
            <summary>
            Starts tagging occurences of the <paramref name="searchTerm"/>.
            </summary>
            <param name="searchTerm">
            The term to search for.
            </param>
            <param name="searchOptions">
            The options to use for the search.
            </param>
            <param name="tagFactory">
            A factory delegate used to generate tags for matches. The delegate is passed as input
            a <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> corresponding to a match and is expected to return the corresponding tag.
            </param>
            <exception cref="T:System.ArgumentException">If <paramref name="searchOptions"/> requests the search to be 
            performed in the reverse direction (see remarks).</exception>
            <exception cref="T:System.ArgumentException">If <paramref name="searchOptions"/> requests the search to be performed with
            wrap (see remarks).</exception>
            <remarks>
            In order to guarantee that the tagger finds all matches in a given span of text, the searches are always
            performed in the forwards direction with no wrap. If the <paramref name="searchOptions"/> passed to the
            tagger indicate otherwise, an exception will be thrown.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1.ClearTags">
            <summary>
            Clears any existing tags and all search terms that are being search for. Cancels any
            ongoing background searches.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTaggerFactoryService">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1"/> objects.
            </summary>
            <remarks>
            This class is a Managed Extensibility Framework service provided by the editor.
            </remarks>
            <example>
            [Import]
            ITextSearchTaggerFactoryService TextSearchTaggerProvider { get; set; }
            </example>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextSearchTaggerFactoryService.CreateTextSearchTagger``1(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1"/> that searches the <paramref name="buffer"/>.
            </summary>
            <typeparam name="T">
            The type of tags the tagger will produce.
            </typeparam>
            <param name="buffer">
            The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> the tagger will search.
            </param>
            <returns>
            A <see cref="T:Microsoft.VisualStudio.Text.Operations.ITextSearchTagger`1"/> that searches the contents of <paramref name="buffer"/>.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory2">
            <summary>
            Contains undo transactions.
            </summary>
            <remarks>
            Typically only one undo transaction history at a time is availbble to the user.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Operations.ITextUndoHistory2.CreateInvisibleTransaction(System.String)">
            <summary>
            Creates a new transaction, invisible, nests it in the previously current transaction, and marks it current.
            </summary>
            <param name="description">The description of the transaction.</param>
            <returns>The new transaction.</returns>
            <remarks>
            <para>Invisible transactions are like normal undo transactions except that they are effectively invisible to the end user. They won't be displayed
            in the undo stack and if the user does an "undo" then all the invisible transactions leading up to the 1st non-invisible transaction are "skipped".</para>
            <para>Invisible transactions can only contain simple text edits (other types of undo actions will be lost and potentially corrupt the undo stack).</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.IBypassUndoEditTag">
            <summary>
            Edit tag indicating that the edit should be ignored by the undo system.
            </summary>
            <remarks>
            <para>
             Yes this is as dangerous as it sounds. Using it will corrupt the undo stack so
             do not use unless you are prepared to do the appropriate clean-up.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.IElisionTag">
            <summary>
            Tag indicating spans of text to be excluded from a view.
            </summary>
            <remarks>
            <para>
            IViewTaggerProviders are querried by the editor implementation with this tag type for views having
            the <see cref="F:Microsoft.VisualStudio.Text.Editor.PredefinedTextViewRoles.Structured"/> view role.
            </para>
            <para>
            These tags cause text to be hidden but do not result in any outlining UI.
            IOutliningRegionTags are used to provide data to the outlining manager.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2">
            <summary>
            Tag Aggregator options.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2.None">
            <summary>
            Default behavior. The tag aggregator will map up and down through all projection buffers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2.MapByContentType">
            <summary>
            Only map through projection buffers that have the "projection" content type.
            </summary>
            <remarks>
            <para>
            Normally, a tag aggregator will map up and down through all projection buffers (buffers
            that implement <see cref="T:Microsoft.VisualStudio.Text.Projection.IProjectionBufferBase"/>).  This flag will cause the projection buffer
            to not map through buffers that are projection buffers but do not have a projection content type.
            </para>
            </remarks>
            <comment>This is used by the classifier aggregator, as classification depends on content type.</comment>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2.DeferTaggerCreation">
            <summary>
            Delay creating the taggers for the tag aggregator.
            </summary>
            <remarks>
            <para>A tag aggregator will, normally, create all of its taggers when it is created. This option
            will cause the tagger to defer the creation until idle time tasks are done.</para>
            <para>If this option is set, a TagsChanged event will be raised after the taggers have been created.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Tagging.TagAggregatorOptions2.NoProjection">
            <summary>
            Do not create taggers on child buffers.
            </summary>
            <remarks>
            <para>A common reason to use this flag would for a tagger that is creating its own tag aggregator
            (for example, to translate one tag into another type of tag). In that case, you can expect another
            instance of your tagger to be created on the child buffers (which would create its own tag aggregators)
            so you don't want to have your tag aggregator include those buffers/
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextModelOptionsSetter">
            <summary>
            A service that propagates <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorOptions"/> to the text model component.
            This is never intended to be part of the public API -- we already have the 
            editor options facilities for that. This is inteded to allow hosting code (e.g. the
            Visual Studio editor package) to propagate options down to the text model,
            where EditorOptions isn't visible.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextModelOptionsSetter setter = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextModelOptionsSetter.SetTextModelOptions(Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Extract options useful to the text model layer and expose them in
            that layer.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AggregateFocusInterceptor.InterceptsAggregateFocus">
            <summary>
            Normally a TextView will have aggregate focus if it or any of its children have keyboard focus. If the InterceptsAggregateFocus property
            is set on a contained element, however, and that element (or one of its children) has focus, then the ITextView will not have aggregate focus.
            </summary>
            <remarks>
            <para>This property affects behavior only when the owning element has keyboard focus.</para>
            <para>TextViews that are embedded in other TextViews must set this property. Otherwise two different text views could simultaneously have
            AggregateFocus (which would violate a couple of assumptions).</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.AggregateFocusInterceptor.SetInterceptsAggregateFocus(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="F:Microsoft.VisualStudio.Text.Editor.AggregateFocusInterceptor.InterceptsAggregateFocus"/> on a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="element">The element on which the property is to be set.</param>
            <param name="value">The value of the property to be set.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.AggregateFocusInterceptor.GetInterceptsAggregateFocus(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="F:Microsoft.VisualStudio.Text.Editor.AggregateFocusInterceptor.InterceptsAggregateFocus"/> on a <see cref="T:System.Windows.DependencyObject"/>.
            </summary>
            <param name="element">The element to read the property value from.</param>
            <returns>The value of the <see cref="F:Microsoft.VisualStudio.Text.Editor.AggregateFocusInterceptor.InterceptsAggregateFocus"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.GlyphMarginAttribute">
            <summary>
            This attribute is used to specify target glyph margin by <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphMouseProcessorProvider"/>s.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.GlyphMarginAttribute.#ctor(System.String)">
            <summary>
            Construct a new instance of the attribute.
            </summary>
            <param name="glyphMargin">The case-insensitive name of the target glyph margin.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="glyphMargin"/> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.GlyphMarginAttribute.GlyphMargins">
            <summary>
            The glyph margin name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HorizontalPositioningMode">
            <summary>
            Enumeration of the possible ways that an inter-line adornment can be positioned horizontally on a line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HorizontalPositioningMode.TextRelative">
            <summary>
            Adornment is positioned with respect to the left edge of the character at the tag's position.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HorizontalPositioningMode.ViewRelative">
            <summary>
            Adornment is positioned with respect to the left edge of the viewport.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HorizontalPositioningMode.Absolute">
            <summary>
            Adornment is positioned with respect to the left edge of the view.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory`1">
            <summary>
            Provides a visual for a specific generic glyph type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphFactory`1.GenerateGlyph(Microsoft.VisualStudio.Text.Formatting.IWpfTextViewLine,`0)">
            <summary>
            Generates a new glyph visual for the given line.
            </summary>
            <param name="line">The line that this glyph will be placed on.</param>
            <param name="tag">Information about the glyph for which the visual is being generated.</param>
            <returns>The visual element for the given tag.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider`1">
            <summary>
            Provides a generic <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory`1"/>.
            </summary>
            <typeparam name="TGlyphTag">The type of the glyph the factory provider supports.</typeparam>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IGlyphFactoryProvider&lt;TGlyphTag&gt;))]
            Exporters must supply a NameAttribute, OrderAttribute, 
            at least one ContentTypeAttribute, and at least one TagTypeAttribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IGlyphFactoryProvider`1.GetGlyphFactory(Microsoft.VisualStudio.Text.Editor.IWpfTextView,Microsoft.VisualStudio.Text.Editor.IWpfTextViewMargin)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory`1"/> for the given text view and margin.
            </summary>
            <param name="view">The view for which the factory is being created.</param>
            <param name="margin">The margin for which the factory will create glyphs.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IGlyphFactory`1"/> for the given view and margin.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ILiveTextBlockFactory">
            <summary>
            A factory able to create live text blocks controls.
            A live text block is a customized <see cref="T:System.Windows.Controls.TextBlock"/> control designed for supporting live region accessiblity text.
            </summary>
            <remarks>
            This interface is a MEF component part and can be imported with a MEF import attribute.
            <code>
            [Import]
            internal ILiveTextBlockFactory LiveTextBlockFactory;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ILiveTextBlockFactory.CreateLiveTextBlock(System.Boolean)">
             <summary>
             Creates a new instance of a live <see cref="T:System.Windows.Controls.TextBlock"/> control.
             </summary>
             <param name="isAssertive">Whether the element sends interruptive notifications 
             if the content of the live region has changed. 
             With true, UI Automation clients and assistive technologies are expected to interrupt 
             the user to inform of changes to the live region.
             With false, UI Automation clients and assistive technologies are expected 
             to not interrupt the user to inform of changes to the live region.
            </param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentFactory">
            <summary>
            Factory used to create adornments used by for the InterLineAdornmentTags.
            </summary>
            <param name="tag">The tag for which the adornment is being created.</param>
            <param name="view">The view in which the adornment is being created.</param>
            <param name="position">The position in the view where the adornment is being created.</param>
            <returns>The newly created adornment.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag">
            <summary>
            Represents a tag that provides adornments to be displayed above or below lines of text.
            </summary>
            <remarks>
            <para>
            The starting point of the tag's span is used to position the tag. The rest of the span is ignored.
            </para>
            <para>
            The adornments used by these tags should never be shared across multiple tags (since WPF does not allow UIElements to be displayed in multiple visual trees).
            </para>
            <para>
            These tags should never be created by an <see cref="T:Microsoft.VisualStudio.Text.Tagging.ITaggerProvider"/> since that could attempt to display the same adornment in multiple views. Only
            <see cref="T:Microsoft.VisualStudio.Text.Tagging.IViewTaggerProvider"/> can be used to create taggers that return this type of tag.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.#ctor(Microsoft.VisualStudio.Text.Editor.InterLineAdornmentFactory,System.Boolean,System.Double,Microsoft.VisualStudio.Text.Editor.HorizontalPositioningMode,System.Double,Microsoft.VisualStudio.Text.Editor.AdornmentRemovedCallback)">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag"/>.
            </summary>
            <param name="adornmentFactory">A factory to create the adornment for this tag.</param>
            <param name="isAboveLine">Whether the adornment is displayed at the top or the bottom of a line.</param>
            <param name="initialHeight">Initial height of the adornment.</param>
            <param name="horizontalPositioningMode">Specifies how the adornment is positioned horizontally on the line.</param>
            <param name="horizontalOffset">Horizontal offset of the adornment with respect to the location defined by <paramref name="horizontalPositioningMode"/>.</param>
            <param name="removalCallback">Called when adornment is removed from the view. May be null. May not be null if <paramref name="adornmentFactory"/> is null.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.AdornmentFactory">
            <summary>
            Gets the factory to create the adornment for this tag. It may be null.
            </summary>
            <remarks>
            <para>This factory will be used to create the adornment displayed by this tag. The factory will only be called once
            when the tag first becomes visible. If the factory is called then this.RemovedCallback (if non-null) will be called
            when the adornment is removed from the view (the tag will also be removed at this time).</para>
            <para>
            The arguments to the factory are (this, v, p) where v is the view in which the adornment will be displayed and
            p is the location of the adornment in the view's TextSnapshot.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.IsAboveLine">
            <summary>
            Indicated whether the adornment is displayed on top of or at the bottom of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.Height">
            <summary>
            The height of of the space created for the adornment.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.HeightChanged">
            <summary>
            Raised whenever the Height property of this tag is changed.
            </summary>
            <remarks>
            This is raised automatically when this.Height changes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.IsAnimating">
            <summary>
            Indicates whether or not the tag's height is currently being animated.
            </summary>
            <remarks>
            If true, which is the default, the containing view will automatically do a layout
            that preserves the location of the line containing the tag when the tag's Height
            property is changed. If false, no layout will be done automatically.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.HorizontalPositioningMode">
            <summary>
            Specifies how the adornment is positioned horizontally on the line (offset by this.HorizontalOffset).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.HorizontalOffset">
            <summary>
            Horizontal offset of the adornment with respect to the location defined by this.HorizontalPositioningMode.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.HorizontalOffsetChanged">
            <summary>
            Raised whenever the HorizontalOffset of this tag is changed.
            </summary>
            <remarks>
            This is raised automatically when this.HorizontalOffset changes.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.InterLineAdornmentTag.RemovalCallback">
            <summary>
            Called when adornment is removed from the view. It may be null.
            </summary>
            <remarks>
            <para>This method is only called if the tag's AdormentFactory was called to create an adornment.</para>
            <para>The arguments to this call will be (this, adornment).</para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IPrintingService">
            <summary>
            Implementers of this service provide printing capabilities through MEF.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IPrintingService.PrintTextBuffer(Microsoft.VisualStudio.Text.Editor.IWpfTextView,System.String,System.Windows.Controls.PrintDialog,System.Drawing.Printing.PageSettings,System.String)">
            <summary>
            Prints the contents of an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> using settings passed in.
            </summary>
            <param name="sourceView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> to be printed.</param>
            <param name="appearanceCategory">The fonts/colors category used to define text classifications.</param>
            <param name="printDialog">The <see cref="T:System.Windows.Controls.PrintDialog"/> queried for information about the print job.</param>
            <param name="pageSettings">The <see cref="T:System.Drawing.Printing.PageSettings"/> representing the current user's preferences as set in the PageSetup dialog.</param>
            <param name="moniker">The name of the document to be printed.</param>
            <remarks>
            This API assumes that the passed in <see cref="T:System.Windows.Controls.PrintDialog"/> has already been shown. The service
            will not show any dialog.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IsOverlayLayerAttribute">
            <summary>
            Indicates that an <see cref="T:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition"/> is an overlay layer.
            </summary>
            <remarks>
            <para>Layers that do not specify this attribute will not be considered overlay layers.</para>
            <para>An overlay layer is not part of the normal view stack (and is not moved when the view is scrolled).</para>
            <para>It only supports adornments that have the <see cref="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior.OwnerControlled"/>.</para>
            <para>Adorments placed in an overlay layer use a coordinate system where (0, 0) is the top-left corner of the view.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IsOverlayLayerAttribute.IsOverlayLayer">
            <summary>
            Indicates whether an <see cref="T:Microsoft.VisualStudio.Text.Editor.AdornmentLayerDefinition"/> defines an overlay adornment layer or not.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IsOverlayLayerAttribute.#ctor(System.Boolean)">
            <summary>
            Creates new insatnce of the <see cref="T:Microsoft.VisualStudio.Text.Editor.IsOverlayLayerAttribute"/> class.
            </summary>
            <param name="isOverlayLayer">Sets whether the adornment layer is an overlay layer.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ISuggestionTag">
            <summary>
            Represents a suggestion tag, which is consumed by the suggestion margin
            to place suggestion visual element such as a Light Bulb.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService2">
            <summary>
            Creates editor views.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            ITextEditorFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService2.CreateTextViewWithoutInitialization(Microsoft.VisualStudio.Text.ITextDataModel,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet,Microsoft.VisualStudio.Text.Editor.IEditorOptions)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> that displays the contents of <paramref name="dataModel"/> without initializing it.
            </summary>
            <param name="dataModel">The <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> that provides the text buffers over which an <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/>
            will be built for the view.</param>
            <param name="roles">The set of roles filled by the view.</param>
            <param name="parentOptions">The options environment for the text view.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.</returns>
            <remarks>
            <para>An <see cref="T:Microsoft.VisualStudio.Text.ITextDataModel"/> can be displayed in multiple views. An <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextViewModel"/> will be constructed based on 
            the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> of the <paramref name="dataModel"/> and the <paramref name="roles"/>.</para>
            <para>ITextEditorFactoryService2.InitializeTextView(view) must be called on the view returned by this funtion.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataModel"/> or <paramref name="roles"/> or <paramref name="parentOptions"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService2.CreateTextViewHostWithoutInitialization(Microsoft.VisualStudio.Text.Editor.IWpfTextView,System.Boolean)">
            <summary>
            Creates a host for the text view without initializing it.
            </summary>
            <param name="wpfTextView">The text view to host.</param>
            <param name="setFocus"><c>true</c> if the <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/> should take focus after it is initialized, <c>false</c> otherwise.</param>
            <returns>An <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost"/>.</returns>
            <remarks>
            <para>ITextEditorFactoryService2.InitializeTextViewHost(host) must be called on the host returned by this funtion.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="wpfTextView"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService2.InitializeTextView(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Initialize a view created using CreateTextViewWithoutInitialization.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.ITextEditorFactoryService2.InitializeTextViewHost(Microsoft.VisualStudio.Text.Editor.IWpfTextViewHost)">
            <summary>
            Initialize a view created using CreateTextViewHostWithoutInitialization.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView2">
            <summary>
            Represents a Visual Studio <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for the WPF platform.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IWpfTextView2.ManipulationLayer">
            <summary>
            Gets the FrameworkElement that is used to detecting touch manipulations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView2.DisplayTextLineContainingBufferPosition(Microsoft.VisualStudio.Text.SnapshotPoint,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition,System.Nullable{System.Double},System.Nullable{System.Double},System.Threading.CancellationToken)">
            <summary>
            Formats and displays the contents of the text buffer so that the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing <paramref name="bufferPosition"/> 
            is displayed at the desired position.
            </summary>
            <param name="bufferPosition">
            The position of the character that is to be contained in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> displayed at the specified vertical position.
            </param>
            <param name="verticalDistance">
            The distance (in pixels) between the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> and the edge of the view. If <paramref name="relativeTo"/> is equal to
            <c>ViewRelativePosition.Top</c>, then the distance is from the top of the view to the top of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>. Otherwise,
            it is the distance from the bottom of the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> to the bottom on the view.
            Negative values are allowed, which might cause the line to be displayed outside the viewport.
            This method can become quite expensive if <paramref name="verticalDistance"/> is large. You 
            should avoid making <paramref name="verticalDistance"/> greater than the height of the view.
            </param>
            <param name="relativeTo">
            Specifies whether the line offset is relative to the top or bottom of the view.
            </param>
            <param name="viewportWidthOverride">
            If specified, the text is formatted as if the viewport had the specified width.
            </param>
            <param name="viewportHeightOverride">
            If specified, the text is formatted as if the viewport had the specified height.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken"/> used to indicate when to abandon the effort to do the layout.
            </param>
            <returns>
            The vertical distance (from the top or bottom of the view) 
            at which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> containing the specified position is to be displayed.
            </returns>
            <remarks>
            <para>If word wrap is disabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the entire <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that contains <paramref name="bufferPosition"/>.
            If word wrap is enabled in the view, then the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> 
            corresponds to the portion of the <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshotLine"/> that both
            contains <paramref name="bufferPosition"/> and fits into the view. <paramref name="bufferPosition"/> may not be the first
            character in the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/>.</para>
            <para>The returned value will generally be equal to <paramref name="verticalDistance"/>, except in cases where the view
            was repositioned to prevent a gap from appearing at the top or bottom of the view.</para>
            <para>The viewport width override will have no effect unless word wrap is enabled in the view.</para>
            <para>The viewport height and width overrides only change how text is formatted for this call. Subsequent calls will use the
            width and height of the viewport (unless explicitly overriden a second time).</para>
            </remarks>
            <exception cref="T:System.ArgumentException"><paramref name="bufferPosition"/> is from the wrong
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="relativeTo"/> is not a valid <see cref="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition"/>.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IWpfTextView2.QueueSetFocus(System.Action)">
            <summary>
            Queue an action to set focus to this <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> instance.
            The action will be queued to the current <see cref="T:System.Windows.Threading.Dispatcher"/> with <see cref="F:System.Windows.Threading.DispatcherPriority.Normal"/> priority.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior2">
            <summary>
            Defines the positioning of adornments.
            </summary>
            <remarks>
            This enum adds a mode to the AdornmentPositioningBehavior needed for diff but we don't want to expose. 
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior2.OwnerControlled">
            <summary>
            The adornment is not moved automatically.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior2.ViewportRelative">
            <summary>
            The adornment is positioned relative to the top left corner of the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior2.TextRelative">
            <summary>
            The adornment is positioned relative to the text in the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.AdornmentPositioningBehavior2.TextRelativeVerticalOnly">
            <summary>
            Behaves like a AdornmentPositioningBehavior.TextRelative adornment but only scrolls vertically.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.Caret">
            <summary>
            Manipulates the on-screen caret in the editor.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToNextCharacter(System.Boolean)">
            <summary>
            When implemented in a derived class, moves the caret to the next character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToPreviousCharacter(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the previous character.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToBeginningOfPreviousLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the beginning of the previous line in the buffer.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToBeginningOfNextLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the beginning of the next line in the buffer.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToBeginningOfPreviousViewLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the beginning of the previous line in the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            If the caret is on the first line of the file, the caret is moved to the beginning of the line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToBeginningOfNextViewLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the beginning of the next line in the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>
            If the caret is on the last line of the file, the caret is moved to the end of the line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToPreviousLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret one line up, preserving its horizontal position.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToNextLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret one line down, preserving its horizontal position.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MovePageUp">
            <summary>
             When implemented in a derived class, moves the caret one page up.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MovePageDown">
            <summary>
             When implemented in a derived class, moves the caret one page down.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MovePageUp(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret one page up.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MovePageDown(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret one page down.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToEndOfLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the end of the line in the buffer.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToStartOfLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the line in the buffer.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToEndOfViewLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the end of the line in the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToStartOfViewLine(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the line in the view.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveTo(System.Int32,System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the position and optionally extends the selection
            if necessary.
            </summary>
            <param name="position">
            The position to place the caret.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is less than 0 or greater than the line number of the last line in the TextBuffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToLine(System.Int32,System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the specified line.
            </summary>
            <param name="lineNumber">
            The line number to which to move the caret.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber"/> is less than 0 or greater than the line number of the last line in the TextBuffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToLine(System.Int32,System.Int32,System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to an offset from the start of the specified line.
            </summary>
            <param name="lineNumber">
            The line number to which to move the caret.
            </param>
            <param name="offset">
            The number of characters from the start of the line at which the caret should be moved.
            </param>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
            <remarks>If <paramref name="offset"/> exceeds the length of the line and virtual space is enabled, the caret will be
            positioned in virtual space. Otherwise the caret will be placed at the end of the line.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber"/> is less than zero 
            or greater than the line number of the last line in the text buffer, or
            <paramref name="offset"/> is less than zero.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToStartOfDocument(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToEndOfDocument(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the end of the document.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToNextWord(System.Boolean)">
            <summary>
            When implemented in a derived class,m oves the caret to the end of the current word, or to the beginning of the
            next word if it is already at the end of the current word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.MoveToPreviousWord(System.Boolean)">
            <summary>
             When implemented in a derived class, moves the caret to the start of the current word, or to the end of the
            previous word if it is already at the start of the current word.
            </summary>
            <param name="extendSelection">
            If <c>true</c>, the selection is extended when the caret is moved; if <c>false</c>, the selection is not extended.
            </param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.Caret.EnsureVisible">
            <summary>
             When implemented in a derived class, ensures that the caret is visible on the screen.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.Caret.AdvancedCaret">
            <summary>
             When implemented in a derived class, gets advanced caret functionality.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint">
            <summary>
            Represents a point in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/> that behaves relative to the view in which it lives.
            </summary>
            <remarks>
            <para>
            While this point is immutable, its position may change in response
            to edits in the text.
            </para>
            <para>
            The start point is always before the end point.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.TextView">
            <summary>
             When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.TextView"/> of this point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.AdvancedTextViewLine">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ITextViewLine"/> that contains this point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.StartOfViewLine">
            <summary>
            When implemented in a derived class, gets the position of the start of the line in the TextView that this DisplayTextPoint is on.
            </summary>
            <remarks>This value could be affected by whether or not Word Wrap is turned on in the view.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.EndOfViewLine">
            <summary>
            When implemented in a derived class, gets the position of the end of the line in the TextView that this DisplayTextPoint is on.
            </summary>
            <remarks>This value could be affected by whether or not Word Wrap is turned on in the view.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.MoveToEndOfViewLine">
            <summary>
            When implemented in a derived class, moves this point to the end of the line in the TextView that it is currently on.
            </summary>
            <remarks>This value could be affected by whether or not Word Wrap is turned on in the view.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.MoveToStartOfViewLine">
            <summary>
            When implemented in a derived class, moves this point to the start of the line in the TextView that it is currently on.
            </summary>
            <remarks>This value could be affected by whether or not Word Wrap is turned on in the view.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.MoveToBeginningOfNextViewLine">
            <summary>
            When implemented in a derived class, moves this point to the beginning of the next line in the TextView.
            </summary>
            <remarks>
            <para>This point moves to the end of the line if the point is on the last
            line.</para>
            <para>This value could be affected by whether or not Word Wrap is turned on in the view.</para>
            <para>If the point is on the last line of the file, the caret is moved to the end of the line.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.MoveToBeginningOfPreviousViewLine">
            <summary>
            When implemented in a derived class, moves this point to the beginning of the previous line in the TextView.
            </summary>
            <remarks>
            <para>This point moves to the start of the line if the point is on the first
            line.</para>
            <para>This value could be affected by whether or not Word Wrap is turned on in the view.</para>
            <para>If the point is on the first line of the file, the caret is moved to the beginning of the line.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.GetFirstNonWhiteSpaceCharacterOnViewLine">
            <summary>
            When implemented in a derived class, gets a display text point for the first 
            non-whitespace character on the current view line.
            </summary>
            <remarks>
            If a line is all white space, this method returns a <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/> at the start of the line.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.DisplayColumn">
            <summary>
             When implemented in a derived class, gets the integer representation of the current position of this text point
            in relation to the visual start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.IsVisible">
            <summary>
             When implemented in a derived class, determines whether the point is currently visible on the screen.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.Clone">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/> at this position that can be
            moved independently from this one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.GetDisplayTextRange(Microsoft.VisualStudio.Text.Editor.DisplayTextPoint)">
            <summary>
             When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange"/> that has this point and <paramref name="otherPoint"/>
            as its start and end points.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange"/> that starts at this point and ends at <paramref name="otherPoint"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="otherPoint"/> does not belong to the same buffer as this point, or
            <paramref name="otherPoint"/> does not belong to the same view as this point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.GetDisplayTextRange(System.Int32)">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange"/> that has this point and <paramref name="otherPosition"/>
            as its start and end positions.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange"/> that starts at this point and ends at <paramref name="otherPosition"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="otherPosition"/> is in negative or past the end of this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.CloneInternal">
            <summary>
            Clones this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint.CloneDisplayTextPointInternal">
            <summary>
            When implemented in a derived class, clones this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange">
            <summary>
            Represents a range in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/> that behaves relative to the view in which it lives.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.TextView">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.TextView"/> of this range.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.Clone">
            <summary>
            Creates a clone of this text range than can be moved independently of this one.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.GetDisplayStartPoint">
            <summary>
            When implemented in a derived class, gets the start point of this text range.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.GetDisplayEndPoint">
            <summary>
            When implemented in a derived class, gets the end point of this text range.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.Visibility">
            <summary>
            When implemented in a derived class, gets the visibility state of this text range.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.CloneInternal">
            <summary>
            Clones this text range.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.CloneDisplayTextRangeInternal">
            <summary>
            When implemented in a derived class, clones the <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.GetDisplayPointEnumeratorInternal">
            <summary>
            When implemented in a derived class, gets the enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.GetEnumerator">
            <summary>
            Gets an enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.DisplayTextRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.HowToShow">
            <summary>
            Defines the ways to display a point or range.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HowToShow.AsIs">
            <summary>
            Show the point or start of the range as it is on screen, or scroll the
            view the minimal amount in order to bring the point or range into view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HowToShow.Centered">
            <summary>
            Show the point or start of the range centered on the screen.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.HowToShow.OnFirstLineOfView">
            <summary>
            Show the point or start of the range on the first line of the view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAnnotationTag.IsNavigable">
            <summary>
            Can the user navigate to the location of this item (errors, find matches, collapsed regions).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IAnnotationTag.ItemKindIdentifier">
            <summary>
             Some unique object where things of the same type (e.g. tracepoints) return the same object. Used to group similar things together.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IAnnotationTag.ItemKindDisplayText(System.Int32)">
            <summary>
            What should be read out to indicate the existance of <paramref name="count"/> things of the same kind (e.g. "1 warning", or "2 errors").
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives">
            <summary>
            Represents common buffer primitives and an extensible mechanism for replacing their values and adding new options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives.Buffer">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/> primitive used for text manipulation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService">
            <summary>
            Creates buffer primitives.  
            </summary>
            <remarks>
            <para>
            This factory is designed to be used by other primitives. Consumers of the primitives 
            should use the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService"/> to get a reference to a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/> 
            and use that to create the primitives.
            </para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IBufferPrimitivesFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService.CreateTextBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/> primitive.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> on which to base this primitive.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/> primitive for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</returns>
            <remarks>
            <para>
            This method always returns the same object if the same <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is passed in.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService.CreateTextPoint(Microsoft.VisualStudio.Text.Editor.TextBuffer,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/> primitive.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/> to which this <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/> belongs.</param>
            <param name="position">The position of this <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/> primitive at the given <paramref name="position"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IBufferPrimitivesFactoryService.CreateTextRange(Microsoft.VisualStudio.Text.Editor.TextBuffer,Microsoft.VisualStudio.Text.Editor.TextPoint,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> primitive.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/> to which this <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/> belongs.</param>
            <param name="startPoint">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/> of the start.</param>
            <param name="endPoint">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/> of the end.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> primitive at the given <paramref name="startPoint"/> and <paramref name="endPoint"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService">
            <summary>
            A service that provides primitives for a given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> or <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IEditorPrimitivesFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService.GetViewPrimitives(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitives"/> for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which to get the <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitives"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitives"/> for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService.GetBufferPrimitives(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives"/> for the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for which to fetch <see cref="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.IBufferPrimitives"/> for the given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IObscuringTip.Dismiss">
            <summary>
            Dismiss the tip. Return true if the tip had been visible.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IObscuringTip.Opacity">
            <summary>
            Get the current opacity of the tip (should be 100% unless explicitly set otherwise).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IObscuringTip.SetOpacity(System.Double)">
            <summary>
            Set the opacity of the tip (generally to either 100% or 10% while the control key is held down.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IObscuringTipManager">
            <summary>
            Class used to manage tips displayed in a view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IThumbnailSupport.RemoveVisualsWhenHidden">
            <summary>
            Controls whether or note the view's visuals are removed when the view is hidden.
            </summary>
            <remarks>
            Defaults to true and is should to false when generating thumbnails of a hidden view (then restored afterwards).
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitives">
            <summary>
            Represents common view primitives and an extensible mechanism for replacing their values and adding new options.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.View">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.View"/> primitive used for scrolling the editor window.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.Selection">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.Selection"/> primitive used for selection manipulation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.Caret">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.IViewPrimitives.Caret"/> primitive used for caret movement.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds">
            <summary>
            Represents the common editor primitives produced by this subsystem.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds.ViewPrimitiveId">
            <summary>
            The ID for the view.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds.SelectionPrimitiveId">
            <summary>
            The ID for the selection.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds.CaretPrimitiveId">
            <summary>
            The ID for the caret.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.EditorPrimitiveIds.BufferPrimitiveId">
            <summary>
            The ID for the buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService">
            <summary>
            Creates view primitives.  
            </summary>
            <remarks>
            <para>
            This factory is designed to  be used by other primitives. Consumers of the primitives 
            should use the <see cref="T:Microsoft.VisualStudio.Text.Editor.IEditorPrimitivesFactoryService"/> to get a reference to a 
            <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView"/> and use that to create the primitives.
            </para>
            </remarks>
            <remarks>This is a MEF component part, and should be imported as follows:
            [Import]
            IViewPrimitivesFactoryService factory = null;
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateTextView(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView"/> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> on which to base this primitive.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView"/> primitive for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</returns>
            <remarks>
            <para>
            This method always returns the same object if the same <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is passed in.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateDisplayTextPoint(Microsoft.VisualStudio.Text.Editor.TextView,System.Int32)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView"/> to which this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/> belongs.</param>
            <param name="position">The position of this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/> primitive at the given <paramref name="position"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateDisplayTextRange(Microsoft.VisualStudio.Text.Editor.TextView,Microsoft.VisualStudio.Text.Editor.TextRange)">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange"/> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextView"/> to which this <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange"/> belongs.</param>
            <param name="textRange">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/>.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextRange"/> primitive at the given <paramref name="textView"/> and <paramref name="textRange"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateSelection(Microsoft.VisualStudio.Text.Editor.TextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.LegacySelection"/> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> on which to base this primitive.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.LegacySelection"/> primitive for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</returns>
            <remarks>
            <para>
            This method always returns the same object if the same <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is passed in.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.IViewPrimitivesFactoryService.CreateCaret(Microsoft.VisualStudio.Text.Editor.TextView)">
            <summary>
            Creates a <see cref="T:Microsoft.VisualStudio.Text.Editor.Caret"/> primitive.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> on which to base this primitive.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.Caret"/> primitive for the given <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</returns>
            <remarks>
            <para>
            This method always returns the same object if the same <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> is passed in.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.LegacySelection">
            <summary>
            Represents the selection on the screen.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.SelectRange(Microsoft.VisualStudio.Text.Editor.TextRange)">
            <summary>
            When implemented in a derived class, selects the given text range.
            </summary>
            <param name="textRange">The range to select.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.SelectRange(Microsoft.VisualStudio.Text.Editor.TextPoint,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, selects the given text range, reversing the selection if needed. Ensures
            that the end point of the selection is visible on screen.
            </summary>
            <param name="selectionStart">The start point for the selection.</param>
            <param name="selectionEnd">The end point for the selection.</param>
            <remarks>If <paramref name="selectionStart"/> is positioned after <paramref name="selectionEnd"/>, then the
            selection is reversed.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.SelectAll">
            <summary>
            When implemented in a derived class, selects all the text in the document. Ensures that the end point
            of the selection is visible on screen.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.ExtendSelection(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, extends the selection from its current start point to the new end point. Ensures
            that the end point of the selection is visible on screen.
            </summary>
            <param name="newEnd">
            The text point to which to extend the selection.
            </param>
            <remarks>
            <paramref name="newEnd"/> may become the new start point, if <paramref name="newEnd"/> is before the current start point.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="newEnd"/> belongs to a different buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.LegacySelection.Clear">
            <summary>
            When implemented in a derived class, resets any selection in the text.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LegacySelection.AdvancedSelection">
            <summary>
            When implemented in a derived class, provides advanced selection manipulation functionality.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextSelection"/>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.LegacySelection.IsReversed">
            <summary>
            When implemented in a derived class, determines whether the end point represents the start of the selection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextBuffer">
            <summary>
            Provides methods for text insertion, deletion, and modification.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetTextPoint(System.Int32)">
            <summary>
            When implemented in a derived class, gets a text point from a integer position.
            </summary>
            <param name="position">The position at which to get the text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or past the end of the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetTextPoint(System.Int32,System.Int32)">
            <summary>
            When implemented in a derived class, gets a text point from a line and column.
            </summary>
            <param name="line">The line on which to get this text point.</param>
            <param name="column">The line-relative position at which to get the text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="line"/> is negative or greater than the number of lines in the buffer, or 
            <paramref name="column"/> is negative or past the end of the line.</exception>
            <remarks>
            The line and column are zero-based.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetLine(System.Int32)">
            <summary>
            When implemented in a derived class, gets a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> representing a line in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/>.
            </summary>
            <param name="line">The line.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> representing a line in the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextBuffer"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="line"/> is negative or greater than the number of lines in the buffer.</exception>
            <remarks>
            <para>
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> returned does not include the line break characters for the line.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetTextRange(Microsoft.VisualStudio.Text.Editor.TextPoint,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, gets a text range from two text points.
            </summary>
            <param name="startPoint">The start point of the range.</param>
            <param name="endPoint">The end point of the range.</param>
            <returns>The text range that starts and ends at the two points.</returns>
            <remarks>The start point of the text range may become the end point if the start point is after the end point.</remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="startPoint"/> or <paramref name="endPoint"/> do not belong to this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetTextRange(System.Int32,System.Int32)">
            <summary>
            When implemented in a derived class, gets a text range from two integer positions.
            </summary>
            <param name="startPosition">The start position of the range.</param>
            <param name="endPosition">The end position of the range.</param>
            <returns>The text range that starts and ends at the two positions.</returns>
            <remarks>The start position of the text range may become the end point if the start position is after the end position.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> is negative or past the end of the buffer.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="endPosition"/> is negative or past the end of the buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextBuffer.AdvancedTextBuffer">
            <summary>
            When implemented in a derived class, provides advanced text manipulation functionality.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetStartPoint">
            <summary>
            When implemented in a derived class, gets the start point of the buffer (always zero).
            </summary>
            <returns>The starting <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextBuffer.GetEndPoint">
            <summary>
            When implemented in a derived class, gets the end point of the buffer (always the last position in the buffer.
            </summary>
            <returns>The end <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextBuffer.Lines">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> objectss representing lines in the buffer.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextPoint">
            <summary>
            Represents a point in the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextPoint.TextBuffer"/>.
            </summary>
            <remarks>
            <para>
            While this point is immutable, its position may change in response
            to edits in the text.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.TextBuffer">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextPoint.TextBuffer"/> of this point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.CurrentPosition">
            <summary>
            When implemented in a derived class, gets the integer representation of the current position of this text point 
            in relation to the start of the buffer.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.Column">
            <summary>
            When implemented in a derived class, gets the integer representation of the current position of this text point
            in relation to the start of the line this point is on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.DeleteNext">
            <summary>
            When implemented in a derived class, deletes the character after this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.DeletePrevious">
            <summary>
            When implemented in a derived class, deletes the character before this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetFirstNonWhiteSpaceCharacterOnLine">
            <summary>
            When implemented in a derived class, gets a text point for the first non-whitespace
            character on the current line.
            </summary>
            <remarks>
            <para>
            If a line is all white space, this method returns a <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/> at the end of the line, but before the
            line break.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetCurrentWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> of the current word. The current word may be white space only.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> of the current word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetNextWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> of the next word that is not white space.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> of the next word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetPreviousWord">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> of the previous word that is not white space.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> of the previous word.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetTextRange(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> that has this point and <paramref name="otherPoint"/>
            as its start and end points.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> that starts at this point and ends at <paramref name="otherPoint"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><paramref name="otherPoint"/> does not belong to the same buffer as this point.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetTextRange(System.Int32)">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> that has this point and <paramref name="otherPosition"/>
            as its start and end positions.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> that starts at this point and ends at <paramref name="otherPosition"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="otherPosition"/> is negative or past the end of this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.InsertNewLine">
            <summary>
            When implemented in a derived class, inserts a new line character at this text point.
            </summary>
            <returns>
            Whether the edit succeeded.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.InsertIndent">
            <summary>
            When implemented in a derived class, inserts a logical tab at this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.InsertText(System.String)">
            <summary>
            When implemented in a derived class, inserts <paramref name="text"/> at this text point.
            </summary>
            <param name="text">The text to insert.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.LineNumber">
            <summary>
            When implemented in a derived class, gets the line this text point is on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.StartOfLine">
            <summary>
            When implemented in a derived class, gets the position of the start of the line this text point is on.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.EndOfLine">
            <summary>
            When implemented in a derived class, gets the position of the end of the line this text point is on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.RemovePreviousIndent">
            <summary>
            When implemented in a derived class, removes a logical tab before this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.TransposeCharacter">
            <summary>
            When implemented in a derived class, transposes the two characters on either side of this text point.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.TransposeLine">
            <summary>
            When implemented in a derived class, transposes the line this point is one with the next line. If this point is on the last
            line of the file, the line is transposed with the previous one.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.TransposeLine(System.Int32)">
            <summary>
            When implemented in a derived class, transposes the line this point is one with the given line number.
            </summary>
            <param name="lineNumber">The line number with which to transpose the line this point is on.</param>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextPoint.AdvancedTextPoint">
            <summary>
            When implemented in a derived class, gets the underlying <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> of this text point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetNextCharacter">
            <summary>
            When implemented in a derived class, gets the next character after this text point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.GetPreviousCharacter">
            <summary>
            When implemented in a derived class, gets the previous character before this text point.
            </summary>
            <returns>The previous character.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Find(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern"/> between this text point and <paramref name="endPoint"/>.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <param name="endPoint">The text point at which to stop searching.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at this text point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Find(System.String,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern"/> between this text point and <paramref name="endPoint"/>.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="endPoint">The text point at which to stop searching.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at this text point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Find(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern"/> starting from this text point.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at this text point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Find(System.String)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern"/> starting from this text point.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at this text point.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.FindAll(System.String,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern"/> between this text point and <paramref name="endPoint"/>.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="endPoint">The text point at which to stop searching.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.FindAll(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern"/> between this text point and <paramref name="endPoint"/>.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="endPoint">The text point at which to stop searching.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.FindAll(System.String)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern"/> starting from this text point.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.FindAll(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern"/> starting from this text point.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveTo(System.Int32)">
            <summary>
            When implemented in a derived class, moves this text point to a specific location.
            </summary>
            <param name="position">The new position of this text point.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or past the end of this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToNextCharacter">
            <summary>
            When implemented in a derived class, moves this point to the next character in the buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToPreviousCharacter">
            <summary>
            When implemented in a derived class, moves this point to the previous character in the buffer.
            </summary>
            
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.Clone">
            <summary>
            Creates a new <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/> at this position that can be
            moved independently from this one.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.CloneInternal">
            <summary>
            When implemented in a derived class, clones the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToLine(System.Int32)">
            <summary>
            When implemented in a derived class, moves the text point at the start of the specified line and ensures it is visible.
            </summary>
            <param name="lineNumber">
            The line number on which to position the text point.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="lineNumber"/> is less than zero 
            or greater than the line number of the last line in the text buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToEndOfLine">
            <summary>
            When implemented in a derived class, movea this point to the end of the line that it is currently on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToStartOfLine">
            <summary>
            When implemented in a derived class, moves this point to the start of the line that it is currently on.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToEndOfDocument">
            <summary>
            When implemented in a derived class, moves this point to the end of the document.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToStartOfDocument">
            <summary>
            When implemented in a derived class, moves this point to the start of the document.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToBeginningOfNextLine">
            <summary>
            When implemented in a derived class, moves this point to the beginning of the next line.
            </summary>
            <remarks>
            This point moves to the end of the line if the point is on the last
            line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToBeginningOfPreviousLine">
            <summary>
            When implemented in a derived class, moves this point to the beginning of the previous line.
            </summary>
            <remarks>
            This point moves to the start of the line if the point is on the first
            line.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToNextWord">
            <summary>
            When implemented in a derived class, moves this point to the end of the current word, or to the beginning of the
            next word if the point is already at the end of the current word.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextPoint.MoveToPreviousWord">
            <summary>
            When implemented in a derived class, moves this point to the start of the current word, or the end of the
            previous word if the point is already at the start of the current word.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextRange">
            <summary>
            Represents a range of text in the buffer.
            </summary>
            <remarks>
            <para>
            While this range is immutable, edits to the text will cause
            it to adjust its location in response to the edits.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetStartPoint">
            <summary>
            When implemented in a derived class, gets the start point of this text range.
            </summary>
            <returns>The starting <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetEndPoint">
            <summary>
            When implemented in a derived class, gets the end point of this text range.
            </summary>
            <returns>The end <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextRange.TextBuffer">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextRange.TextBuffer"/> of this text range.
            </summary>
            <returns>The <see cref="P:Microsoft.VisualStudio.Text.Editor.TextRange.TextBuffer"/> of this text range.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextRange.AdvancedTextRange">
            <summary>
            When implemented in a derived class, gets the underlying <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> of this <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/>.
            The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/> should be used only for advanced functionality.
            </summary>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.MakeUppercase">
            <summary>
            When implemented in a derived class, makes the text in this range uppercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks><para>If the range is empty, will apply to the character next to the range only.</para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.MakeLowercase">
            <summary>
            When implemented in a derived class, makes the text in the this range lowercase.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
            <remarks><para>If the range is empty, this method applies to the character next to the range only.</para></remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Capitalize">
            <summary>
            When implemented in a derived class, makes the first character in every word in this range uppercase, and makes the rest of the characters lowercase.
            </summary>
            <remarks>
            If the range is empty, this method applies to the character next to the range only.
            If the range starts in the middle of a word, only the part in the range will be made lowercase.
            </remarks>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.ToggleCase">
            <summary>
            When implemented in a derived class, switches the case of every character in this range.
            </summary>
            <remarks><para>If the range is empty, this method applies to the character next to the range only.</para></remarks>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Delete">
            <summary>
            When implemented in a derived class, deletes all the text in this range.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Indent">
            <summary>
            When implemented in a derived class, indents all the lines in this range.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Unindent">
            <summary>
            When implemented in a derived class, unindents all the lines in this range.
            </summary>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextRange.IsEmpty">
            <summary>
            When implemented in a derived class, determines whether the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> is zero-length.
            </summary>
            <returns><c>true</c> if the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> is zero length, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Find(System.String)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern"/> in this text range.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at the start point of this range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Find(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            When implemented in a derived class, finds the start of the first occurrence of <paramref name="pattern"/> in this text range.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>The text range of the first occurrence of the pattern if it was found, otherwise a zero-length text range at the start point of this range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.FindAll(System.String)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern"/> starting in this text range.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.FindAll(System.String,Microsoft.VisualStudio.Text.Operations.FindOptions)">
            <summary>
            When implemented in a derived class, finds all matches of <paramref name="pattern"/> starting in this text range.
            </summary>
            <param name="pattern">The pattern to find.</param>
            <param name="findOptions">The options to use while searching.</param>
            <returns>A list of matches in the order they were found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.ReplaceText(System.String)">
            <summary>
            When implemented in a derived class, replaces the text in this range with <paramref name="newText"/>.
            </summary>
            <param name="newText">The new text.</param>
            <remarks>
            This <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> spans the new text after it has been replaced.
            </remarks>
            <returns>
            <c>true</c> if the edit succeeded, otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetText">
            <summary>
            When implemented in a derived class, gets the text in this range.
            </summary>
            <returns>The text in the range.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.Clone">
            <summary>
            When implemented in a derived class, creates a clone of this text range than can be moved independently of this one.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.CloneInternal">
            <summary>
            When implemented in a derived class, clones the text range.
            </summary>
            <returns>The cloned <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.SetStart(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, sets the start point of this text range.
            </summary>
            <param name="startPoint">The new start point.</param>
            <remarks>
            If <paramref name="startPoint"/> occurs after
            the current end point in the buffer, <paramref name="startPoint"/> becomes the end point, and the current end point becomes the start point.
            </remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="startPoint"/> belongs to another buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.SetEnd(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, sets the end point of this text range.
            </summary>
            <param name="endPoint">The new end point.</param>
            <remarks>
            <para>
            If <paramref name="endPoint"/> is before
            the current start point in the buffer, <paramref name="endPoint"/> becomes the start point, and the current start point becomes the end point.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException"><paramref name="endPoint"/> belongs to another buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.MoveTo(Microsoft.VisualStudio.Text.Editor.TextRange)">
            <summary>
            When implemented in a derived class, moves this text range to the range of <paramref name="newRange"/>.
            </summary>
            <param name="newRange">The new range.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetEnumeratorInternal">
            <summary>
            When implemented in a derived class, gets the enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.
            </summary>
            <returns>the enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>An enumerator of type <see cref="T:Microsoft.VisualStudio.Text.Editor.TextPoint"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.TextView">
            <summary>
            Provides methods for scrolling the editor window up and down.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.MoveLineToTop(System.Int32)">
            <summary>
            When implemented in a derived class, moves the current line to the top of the view without moving the caret.
            </summary>
            <param name="lineNumber">The number of lines to move.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.MoveLineToBottom(System.Int32)">
            <summary>
            When implemented in a derived class, moves the current line to the bottom of the view without moving the caret.
            </summary>
            <param name="lineNumber">The number of lines to move.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.ScrollUp(System.Int32)">
            <summary>
            When implemented in a derived class, scrolls the view up by one line.
            </summary>
            <param name="lines">The number of lines to scroll.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.ScrollDown(System.Int32)">
            <summary>
            When implemented in a derived class, scrolls the view down by one line.
            </summary>
            <param name="lines">The number of lines to scroll.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.ScrollPageDown">
            <summary>
            When implemented in a derived class, scrolls the view down by one page and does not move the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.ScrollPageUp">
            <summary>
            When implemented in a derived class, scrolls the view up by one page and does not move the caret.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.Show(Microsoft.VisualStudio.Text.Editor.DisplayTextPoint,Microsoft.VisualStudio.Text.Editor.HowToShow)">
            <summary>
            When implemented in a derived class, shows the <paramref name="point"/> in the view.
            </summary>
            <param name="point">The point to  display.</param>
            <param name="howToShow">How the point should be displayed on the screen.</param>
            <returns><c>true</c> if the point was actually displayed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.Show(Microsoft.VisualStudio.Text.Editor.DisplayTextRange,Microsoft.VisualStudio.Text.Editor.HowToShow)">
            <summary>
            When implemented in a derived class, shows the <paramref name="textRange"/> in the view.
            </summary>
            <param name="textRange">The <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> to  display.</param>
            <param name="howToShow">How the point should be displayed on the screen.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Formatting.VisibilityState"/> that describes how the range was actually displayed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextPoint(System.Int32)">
            <summary>
            When implemented in a derived class, gets a display text point from a integer position.
            </summary>
            <param name="position">The position at which to get the text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="position"/> is negative or past the end of the buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextPoint(Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, gets a display text point from a buffer text point position.
            </summary>
            <param name="textPoint">The buffer text point to translate into a display text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="textPoint"/> does not belong to the same buffer as the view.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextPoint(System.Int32,System.Int32)">
            <summary>
            When implemented in a derived class, gets a display text point from a line and column.
            </summary>
            <param name="line">The line on which to get this text point.</param>
            <param name="column">The line-relative position at which to get the text point.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="line"/> is negative or greater than the number of lines in the buffer, or
            <paramref name="column"/> is negative or past the end of the line.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextRange(Microsoft.VisualStudio.Text.Editor.TextPoint,Microsoft.VisualStudio.Text.Editor.TextPoint)">
            <summary>
            When implemented in a derived class, gets a display text range from two display text points.
            </summary>
            <param name="startPoint">The start point of the range.</param>
            <param name="endPoint">The end point of the range.</param>
            <returns>The text range that starts and ends at the two points.</returns>
            <remarks>The start point of the text range may become the end point if the start point occurs after the end point.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="startPoint"/> or <paramref name="endPoint"/> do not belong to this buffer.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextRange(Microsoft.VisualStudio.Text.Editor.TextRange)">
            <summary>
            When implemented in a derived class, gets a display text range from a text range on the buffer.
            </summary>
            <param name="textRange">The text range on the buffer.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Text.Editor.DisplayTextPoint"/>.</returns>
            <remarks>The start point of the text range may become the end point if the start point occurs after the end point.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="textRange"/> does not belong to the same buffer as the view.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Editor.TextView.GetTextRange(System.Int32,System.Int32)">
            <summary>
            When implemented in a derived class, gets a display text range from two integer positions.
            </summary>
            <param name="startPosition">The start position of the range.</param>
            <param name="endPosition">The end position of the range.</param>
            <returns>The text range that starts and ends at the two positions.</returns>
            <remarks>The start position of the text range may become the end point if the start position occurs after the end position.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startPosition"/> is negative or past the end of the buffer.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="endPosition"/> is negative or past the end of the buffer.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.VisibleSpan">
            <summary>
            When implemented in a derived class, gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.TextRange"/> of text currently visible on screen.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.AdvancedTextView">
            <summary>
            When implemented in a derived class, provides advanced view manipulation functionality.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.Caret">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextView.Caret"/> of this view.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.Selection">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextView.Selection"/>. of this view. 
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Editor.TextView.TextBuffer">
            <summary>
            When implemented in a derived class, gets the <see cref="P:Microsoft.VisualStudio.Text.Editor.TextView.TextBuffer"/>. of this view. 
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition2">
            <summary>
            Defines the meaning of the verticalOffset parameter in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.DisplayTextLineContaining(...).
            </summary>
            <remarks>
            This enum adds a couple of modes to the ViewRelativePosition that we need to support for the InterLineAdornments
            but don't want to expose. The WpfTextView accepts the new values but doesn't pass them on to anyone else.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition2.Top">
            <summary>
            The offset with respect to the top of the view to the top of the line.
            </summary>
            <remarks>
            Must match ViewRelativePosition.Top.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition2.Bottom">
            <summary>
            The offset with respect to the bottom of the view to the bottom of the line.
            </summary>
            <remarks>
            Must match ViewRelativePosition.Bottom.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition2.TextTop">
            <summary>
            The offset with respect to the top of the view to the top of the text on the line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition2.TextBottom">
            <summary>
            The offset with respect to the bottom of the view to the bottom of the text on the line.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Text.Editor.ViewRelativePosition2.Baseline">
            <summary>
            The offset is with respect to the BaseLine of the line containing bufferPosition.
            </summary>
            <remarks>
            If this positioning mode is used (and only this positioning mode), then bufferPosition can be default(SnapshotPoint).
            If a default(SnapshotPoint) is used or one is given but that line is not visible, then the view will pick an appropriate line to use.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMetadata">
            <summary>
            Provides metadata for ClassificationFormatDefinitions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IClassificationFormatMetadata.ClassificationTypeNames">
            <summary>
            Gets a set of ClassificationTypeName objects from the ClassificationTypeAttribute.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Classification.IEditorFormatMetadata">
            <summary>
            Provides metadata for EditorFormatDefinitions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IEditorFormatMetadata.Name">
            <summary>
            Gets the name that identifies a format.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IEditorFormatMetadata.UserVisible">
            <summary>
            Determines whether this format is visible to users.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.Classification.IEditorFormatMetadata.Priority">
            <summary>
            Priority of the format map, used to resolve situations where two format maps have
            the same name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ICompositingLineTransformSource">
            <summary>
            Provides the line transform for a line of formatted text.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ICompositingLineTransformSource.GetLineTransform(Microsoft.VisualStudio.Text.Formatting.LineTransform,Microsoft.VisualStudio.Text.Formatting.ITextViewLine,System.Double,Microsoft.VisualStudio.Text.Editor.ViewRelativePosition)">
            <summary>
            Computes the line transform for a given line of formatted text.
            </summary>
            <param name="line">The line for which to compute the line transform.</param>
            <param name="yPosition">The y-coordinate of the line.</param>
            <param name="placement">The placement of the line with respect to <paramref name="yPosition"/>.</param>
            <returns>The line transform for that line.</returns>
            <remarks>If <paramref name="placement"/> is ViewRelativePosition.Top, then the top of the line
            will be located at <paramref name="yPosition"/>. Otherwise the bottom of the line will be located at
            <paramref name="yPosition"/>. Also, the line transform only affects the line itself and not any space
            allocated above or below the line for adornments.</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.ICompositingLineTransformSourceProvider">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> objects.  
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ILineTransformSourceProvider))]
            Exporters must supply a ContentTypeAttribute, TextViewRoleAttribute, NameAttribute and may provide ordering attributes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.ICompositingLineTransformSourceProvider.Create(Microsoft.VisualStudio.Text.Editor.IWpfTextView)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> for the given <paramref name="textView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/> on which the <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/> will format.</param>
            <returns>The new <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSource"/>.  
            The value may be null if this <see cref="T:Microsoft.VisualStudio.Text.Formatting.ILineTransformSourceProvider"/> decides not to participate.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2">
            <summary>
            Generates RTF-formatted text from a collection of snapshot spans.
            </summary>
            <remarks>
            This is a MEF component part and should be imported using the following attribute:
            [Import(typeof(IRtfBuilderService))] 
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken"/> used to indicate when to abandon the effort to generate the rich text.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,System.Threading.CancellationToken)">
            <summary>
            Gets an RTF string containing the formatted text of the snapshot spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans. A new line "\par" rtf keyword will be placed between the provided
            <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken"/> used to indicate when to abandon the effort to generate the rich text.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an RTF string that contains the formatted text of the spans.
            </summary>
            <remarks>
            The generated RTF text is based on an in-order walk of the snapshot spans, 
            with the characteristics and formatting properties of <paramref name="textView"/>.
            All the snapshot spans must belong to <paramref name="textView"/>.
            </remarks>
            <param name="spans">
            The collection of snapshot spans.
            </param>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> that contains the snapshot spans.
            </param>
            <param name="delimiter">
            A delimiter string to be inserted between the RTF generated code for the <see cref="T:Microsoft.VisualStudio.Text.SnapshotSpan"/>s in the <see cref="T:Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection"/>.
            </param>
            <param name="cancellationToken">
            <see cref="T:System.Threading.CancellationToken"/> used to indicate when to abandon the effort to generate the rich text.
            </param>
            <returns>
            A <see cref="T:System.String"/> containing RTF data.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Text.Formatting.IRtfBuilderService2.GenerateRtf(Microsoft.VisualStudio.Text.NormalizedSnapshotSpanCollection,Microsoft.VisualStudio.Text.Editor.ITextView,System.Threading.CancellationToken)" -->
        <member name="T:Microsoft.VisualStudio.Text.Formatting.IViewSynchronizationManager">
            <summary>
            Manage the simultaneous layout to two <see cref="T:Microsoft.VisualStudio.Text.Editor.IWpfTextView"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Storage.IDataStorage">
            <summary>
            Provides a persistent data storage for items. Items are identified by textual keys and are retrieved as 
            <see cref="T:System.Windows.ResourceDictionary"/> objects.
            </summary>
            <remarks>
            TODO: For Dev11, this interface should provide methods to also write data (to disk or whatever underlying data storage) as opposed
            to only provide a method to retrieve values.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Storage.IDataStorage.TryGetItemValue(System.String,System.Windows.ResourceDictionary@)">
            <summary>
            Retrieves the value of the item named itemKey.
            </summary>
            <returns><c>true</c> if item exists in the storage, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Storage.IDataStorageService">
            <summary>
            Implementers of this interface provide <see cref="T:Microsoft.VisualStudio.Text.Storage.IDataStorage"/> objects identified by a set of textual keys.
            </summary>
            <remarks>
            This is a MEF component part and providers should export their implementations with the export attribute.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Storage.IDataStorageService.GetDataStorage(System.String)">
            <summary>
            Return a <see cref="T:Microsoft.VisualStudio.Text.Storage.IDataStorage"/> for the provided key.
            </summary>
            <returns>Null if no data storage for the provided key exists, otherwise returns the corresponding <see cref="T:Microsoft.VisualStudio.Text.Storage.IDataStorage"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Outlining.IAccurateOutliningManager">
            <summary>
            Extension of IOutliningManager to allow it to get accurate (if slow) results from the outlining taggers.
            </summary>
            <remarks>
            <para>This interface only contains the minimal number of overloads of IOutliningManager methods to make restoring regions when opening a file
            work. More overloads can be added as needed.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Outlining.IAccurateOutliningManager.CollapseAll(Microsoft.VisualStudio.Text.SnapshotSpan,System.Predicate{Microsoft.VisualStudio.Text.Outlining.ICollapsible},System.Threading.CancellationToken)">
            <summary>
            Collapses all regions that match the specified predicate.
            </summary>
            <param name="span">The regions that intersect this span.</param>
            <param name="match">The predicate to match.</param>
            <returns>The newly-collapsed regions.</returns>
            <remarks>
            The <paramref name="match"/> predicate may be passed regions that cannot actually be collapsed, due
            to the region being partially obscured by another already collapsed region (either pre-existing or collapsed
            in an earlier call to the predicate).  The elements of the returned enumeration do accurately track
            the regions that were collapsed, so they may differ from the elements for which the predicate returned <c>true</c>.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager">
            <summary>
            A per text view manager for brace completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.Enabled">
            <summary>
            Returns true if brace completion is enabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.HasActiveSessions">
            <summary>
            Returns true if there are currently active sessions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.OpeningBraces">
            <summary>
            Opening brace characters the brace completion manager is currently registered to handle.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.ClosingBraces">
            <summary>
            Closing brace characters the brace completion manager is currently registered to handle.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreTypeChar(System.Char,System.Boolean@)">
            <summary>
            Called by the editor when a character has been typed and before it is 
            inserted into the buffer.
            </summary>
            <param name="handledCommand">Set to true to prevent the closing brace character from being 
            inserted into the buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostTypeChar(System.Char)">
            <summary>
            Called by the editor after a character has been typed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreTab(System.Boolean@)">
            <summary>
            Called by the editor when tab has been pressed and before it is inserted into the buffer.
            </summary>
            <param name="handledCommand">Set to true to prevent the tab from being inserted into the buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostTab">
            <summary>
            Called by the editor after the tab has been inserted.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreBackspace(System.Boolean@)">
            <summary>
            Called by the editor before the character has been removed.
            </summary>
            <param name="handledCommand">Set to true to prevent the backspace action from completing.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostBackspace">
            <summary>
            Called by the editor after the character has been removed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreDelete(System.Boolean@)">
            <summary>
            Called by the editor when delete is pressed within the session.
            </summary>
            <param name="handledCommand">Set to true to prevent the deletion.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostDelete">
            <summary>
            Called by the editor after the delete action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PreReturn(System.Boolean@)">
            <summary>
            Called by the editor when return is pressed within the session.
            </summary>
            <param name="handledCommand">Set to true to prevent the new line insertion.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.BraceCompletion.IBraceCompletionManager.PostReturn">
            <summary>
            Called by the editor after the new line has been inserted.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Text.Structure.IStructureTipManager">
            <summary>
            Facilitates invocation of Structure Guide Lines tooltip.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Structure.IStructureTipManager.CanTriggerStructureTip(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets whether or not Structure Tips are available in the current view.
            </summary>
            <param name="textView">The current view.</param>
            <returns>Returns true if structure tips are available.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Text.Structure.IStructureTipManager.TriggerStructureTip(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.SnapshotPoint)">
            <summary>
            Displays the structure guide lines tooltip containing the context at the
            specified trigger point.
            </summary>
            <param name="textView">The textview to display the tip for.</param>
            <param name="point">The point to display context for.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder">
            <summary>
            The CodeLensCalloutBorder decorator is used to draw a border with a callout shape and background around another element.
            the callout presumes it is getting used in a popup window that is placed closely relative to the popup's PlacementTarget.
            
            It also supports a "squish" behavior, where the callout will attempt to squish its content's vertical size down to a set size to
            avoid the popup popping down and covering editor content.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.#ctor">
            <summary>
                Default DependencyObject constructor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.BorderWidth">
            <summary>
            The BorderWidth property defined how thick a border to draw.  The property's value is a double value, not a thickness
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.Padding">
            <summary>
            The Padding property inflates the effective size of the child by the specified thickness.  This
            achieves the same effect as adding margin on the child, but is present here for convenience.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.BorderBrush">
            <summary>
            The BorderBrush property defines the brush used to fill the border region.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.Background">
            <summary>
            The Background property defines the brush used to fill the area within the border.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.CalloutSize">
            <summary>
            The CalloutSize property defines the size of the callout shape drawn at the top or bottom of the border
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.MinSquishHeight">
            <summary>
            the smallest size this callout will "squish" its content to to avoid the popup popping down.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.CalloutTarget">
            <summary>
            get or set the callout target component.  this is where the arrow (attempts) to point.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.BorderWidthProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.BorderWidth" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.PaddingProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.Padding" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.BorderBrushProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.BorderBrush" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.BackgroundProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.Background" /> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.CalloutSizeProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.CalloutSize"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.CalloutTargetProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.CalloutTarget"/> property.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.MinSquishHeightProperty">
            <summary>
            DependencyProperty for <see cref="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.MinSquishHeight"/> property.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.GetMaxContentSize(System.Double,System.Double)">
            <summary>
            given a container size, return the maxium space that could be available to a child given the callout, margins, borders, etc.
            </summary>
            <param name="maxContainerWidth"></param>
            <param name="maxContainerHeight"></param>
            <returns>the maximum size a child could be</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.MeasureOverride(System.Windows.Size)">
            <summary>
            Updates DesiredSize of the CodeLensCalloutBorder.  Called by parent UIElement.  This is the first pass of layout.
            </summary>
            <remarks>
            Border determines its desired size it needs from the specified border the child: its sizing
            properties, margin, and requested size.
            </remarks>
            <param name="constraint">Constraint size is an "upper limit" that the return value should not exceed.</param>
            <returns>The Decorator's desired size.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.ArrangeOverride(System.Windows.Size)">
            <summary>
            CodeLensCalloutBorder computes the position of its single child and applies its child's alignments to the child.
            
            </summary>
            <param name="finalSize">The size reserved for this element by the parent</param>
            <returns>The actual ink area of the element, typically the same as finalSize</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            if a callout was generated in arrange, this draws it on render
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.HelperDeflateRect(System.Windows.Rect,System.Windows.Thickness)">
            Helper to deflate rectangle by thickness
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.GenerateCalloutGeometry(System.Windows.Media.StreamGeometryContext,System.Windows.Rect,System.Windows.Size,System.Double,System.Boolean,System.Double)">
            <summary>
            generates the geometry for the callout in the given context, and a set of guidelines to make sure the lines don't get anti-aliased
            </summary>
            <param name="ctx">already open stream geometry context</param>
            <param name="rect">the outer size of the entire callout border</param>
            <param name="calloutSize">the size of the callout itself</param>
            <param name="calloutOffset">the x offset for the point of the callout</param>
            <param name="calloutBelow">indicates that the callout is being displayed at the bottom of the border</param>
            <param name="thickness">thickness of the border</param>
            <returns>guidelines that can be used when drawing to prevent anti-alaising of the horizontal and vertical lines</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.MonitorTop">
            <summary>
            get the top coordinate of the current monitor.  
            If there are multiple monitors, the coord could be negative.  
            If the taskbar (or anything else) is reserving display space, the top may be non-zero
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.UpdateMonitorTop(System.Nullable{System.Windows.Point})">
            <summary>
            updates the MonitorTopCoord based on the monitor that contains the given screen coordinate
            </summary>
            <param name="screenCoord">The screen coordinate used to figure out which monitor the callout is on</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.LastTargetScreenLocation">
            <summary>
            the last location the target was on screen, used to decide if the callout should recompute its location
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.LastPopupScreenLocation">
            <summary>
            the last location the popup was on screen, used to decide if the callout should recompute its location
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.BorderGeometryCache">
            <summary>
            geometry drawn in OnRender
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.GuidelineCache">
            <summary>
            guidelines used in OnRender
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensCalloutBorder.HwndCache">
            <summary>
            the Hwnd of the window for the callout, whenever this moves, the callout is updated
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensDataPointPresenter">
            <summary>
            UI presentation for a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/>
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensDataPointPresenter.LeaveMenuMode">
            <summary>
            Restores focus to the previously-focused element when in menu mode.
            </summary>
            <remarks>
            Copied from MenuBase.RestorePreviousFocus
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensDataPointPresenter.CanCycleIndicators">
            <summary>
            returns true if there are any other indicators enabled
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensPopupSizeConverter">
            <summary>
            converter used to set the attached property for size
            expected:
            value[0] = CodeLensCalloutBorder
            value[0] = MaxWidth (ideally bound from the container)
            value[1] = MaxHeight (ideally bound from the container)
            value
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensPopupOffsetConverter">
            <summary>
            offset the popup by the parameter amount, using SystemParameters.MenuDropAlignment to take into account which
            direction the popup will be aligned.  note, only the offset field of the converter is used, the converter doesn't
            use parameter or value in any way.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensDetailsControl">
            <summary>
            Interaction logic for CodeLensDetailsControl.xaml
            </summary>
            <summary>
            CodeLensDetailsControl
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensDetailsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ErrorMessageVisibilityConverter">
            <summary>
            Converts an error message into a visibility.  A null or empty (or all whitespace) string will be collapsed, any other value will be visible.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ErrorMessageVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert null or empty string to Visibility.Collapsed, anything else to Visibility.Visible.
            </summary>
            <param name="value">string</param>
            <param name="targetType">Visibility</param>
            <param name="parameter">null</param>
            <param name="culture">null</param>
            <returns>Visible or Collapsed</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ErrorMessageVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            not implemented
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.OthersCollapsedVisibilityConverter">
            <summary>
            converter that returns Visibility.Visible if all of the other values are Visibility.Collapsed
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensOptions">
            <summary>
            Options applicable to CodeLens.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensOptions.IsCodeLensEnabledOptionId">
            <summary>
            The option that determines whether or not CodeLens as a whole is enabled.  When disabled,
            CodeLens UI does not appear inside any documents.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensOptions.CodeLensDisabledProvidersOptionId">
            <summary>
            The option that determines which specific CodeLens providers are disabled.  This option's value
            should be an array of names which correspond to ICodeLensDataPointProviders which should not be loaded.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPoint`2">
            <summary>
            An abstract base class for custom implemention of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> with strongly typed data types.
            </summary>
            <typeparam name="TData">The type of the object retrieved from <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint.GetDataAsync(System.Threading.CancellationToken)"/>.</typeparam>
            <typeparam name="TDetail">The type of the object retrieved from <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint.GetDetailsAsync(System.Threading.CancellationToken)"/>.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPoint`2.GetDataAsync(System.Threading.CancellationToken)">
            <summary>
            Gets lens data from the data point.
            </summary>
            <returns>
            An object of type <c>TData</c> representing the lens data from the data point.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPoint`2.GetDetailsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets lens details from the data point.
            </summary>
            <returns>
            An object of the type <c>TDetail</c> representing the lens details of the data point.
            </returns>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPoint`2.Invalidated">
            <summary>
            An event raised when the data point is invalidated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPoint`2.Dispose">
            <summary>
            Disposes of the data point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPoint`2.ThrowIfDisposed">
            <summary>
            Throws <see cref="T:System.ObjectDisposedException"/> if the data point is already disposed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPoint`2.Invalidate">
            <summary>
            Invalidates the data point.
            </summary>
            <remarks>
            This raises the <see cref="E:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPoint`2.Invalidated"/> event.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPointViewModel`1">
            <summary>
            An abstract base class for implementing <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel"/>.
            </summary>
            <typeparam name="TDataPoint">The type of the data point this view model associates with.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPointViewModel`1.OnGetPropertyFailed(System.String,System.Exception)">
            <summary>
            Called when failing to get the property value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPointViewModel`1.GetProperty``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Used in a property getter for asynchronously retrieving proerty value.
            The first call just invokes the async task and returns immediately with a default value.
            The property changed event will be raised when the async task completes and the value is cached.
            Subsequent calls should just return the cached value.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPointViewModel`1.UpdatePropertyAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)">
            <summary>
            Asynchronously calls the updateFunction to update the property's value
            and raises property changed event for the specified property when value is retrieved.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPointViewModel`1.InvokeAsyncDuringUpdatePropertyAsync(System.Action)">
            <summary>
            Specifically designed to asynchronously invoke the <paramref name="action"/>
            from within <see cref="M:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDataPointViewModel`1.UpdatePropertyAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.String)"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensDetailsTemplateProvider">
            <summary>
            Base class for data point details template providers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.AbstractCodeLensIndicatorTemplateProvider">
            <summary>
            Base class for data point indicator template providers.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment">
            <summary>
            Interaction logic for CodeLensAdornment
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment.DetailsMaxSizeProperty">
            <summary>
            The maximum size of usable space inside the CodeLens details view
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment.KeepDetailsVisible(System.Windows.Media.Visual)">
            <summary>
            Allows CodeLens details content to keep the details UI visible temporarily, if they are about to do something
            that would normally cause it to lose focus and go away.  This should only be used in cases where the work is not going to
            cause the indicator to disappear.  For example, showing a VS platform context menu over the details content would use this.
            <example>
            <code>
            using (var holdopen = CodeLensAdornment.KeepDetailsVisible(visualInside))
            {
                DoWorkThatWouldCausePopupToClose();
            }
            </code>
            </example>
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment.PopupDetailsKeepOpenScope.GetPopupKeepOpenCount(System.Windows.DependencyObject)">
            <summary>
            the number of popup details keep open calls for a given popup
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment.PopupDetailsKeepOpenScope.SetPopupKeepOpenCount(System.Windows.DependencyObject,System.Int32)">
            <summary>
            set the number of popup details keep open calls for a given popup
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment.PopupDetailsKeepOpenScope.#ctor(System.Windows.Media.Visual)">
            <summary>
            create a new popup keepopen scope for the visual source.  if no popup is found for this source, this is effectively a no-op.
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensDataPointAttribute">
            <summary>
            A MEF metadata attribute for providing the target <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> constraint on a MEF component part.
            </summary>
            <remarks>
            This attribute is used in <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider"/> implementation
            to specify the type of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> it will create.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensDataPointViewModelAttribute">
            <summary>
            A MEF metadata attribute for providing the target <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel"/> constraint on a MEF component part.
            </summary>
            <remarks>
            This attribute is used in <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModelProvider"/> to specify
            the type of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel"/> it will create.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPinEventArgs.LocalizedIndicatorName">
            <summary>
            The localized name of the indicator.  This property is not set until CreateIndicator is called.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensPinEventArgs.CreateIndicatorAsync(System.Threading.CancellationToken)">
            <summary>
            Factory method to create the indicator for this event 
            </summary>
            <returns>The indicator corresponding to the event arguments</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle">
            <summary>
             Defines a set of properties that will be used to style the default CodeLens presenter.
            </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(CodeLensPresenterStyle))]
             [Name]
             [Order]
             Only one CodeLensPresenterStyle should be exported.
             </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PropertyChanged">
            <summary>
            Event raised when a property on this object's value changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.IndicatorTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the individual indicators.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.IndicatorHoveredTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the individual indicators when the mouse is over them.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.IndicatorDisabledTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the individual indicators when the indicator is disabled.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.IndicatorSelectedTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the individual indicators when the indicator is selected (and the popup is open).
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.IndicatorSeparatorBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the separators in between indicators.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PopupBackgroundColor">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Color"/> that will be used to paint the background of the details popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PopupBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background of the details popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PopupTextBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to draw text by default in the details popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PopupBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the border for the details popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PopupPinButtonHoverBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used for the background of the pin button on mouse hover.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PopupPinButtonHoverForegroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used for the foreground of the pin button on mouse hover.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PopupPinButtonMouseDownBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used for the background of the pin button on mouse down.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.PopupPinButtonMouseDownForegroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used for the foreground of the pin button on mouse down.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.AreGradientsAllowed">
            <summary>
            Gets a value determining whether or not gradients should be used in the details popup
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.AreAnimationsAllowed">
            <summary>
            Gets a value determining whether or not gradients should be used in the details popup
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.DropShadowColor">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Color"/> that will be used for the drop shadow of the popup
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.AccessKeyBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background for the access key popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.AccessKeyBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the border for the access key popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.AccessKeyTextBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the text for the access key popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.AccessKeyDisabledBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background for the disabled access key popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.AccessKeyDisabledBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the border for the disabled access key popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.AccessKeyDisabledTextBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the text for the disabled access key popup.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.ToolTipTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the individual indicators when the mouse is over them.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.ToolTipBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used for the background of tooltips.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensPresenterStyle.ToolTipBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used for the border of tooltips.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint">
            <summary>
            Represents the data point for a lens indicator in CodeLens adornments.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint.Invalidated">
            <summary>
            Raised when the data point is invalidated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint.GetDataAsync(System.Threading.CancellationToken)">
            <summary>
            Gets lens data from the data point.
            </summary>
            <returns>
            An <c>object</c> representing the lens data from the data point.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint.GetDetailsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets lens details from the data point.
            </summary>
            <returns>
            An <c>object</c> representing the lens details of the data point.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider">
             <summary>
             Represents a provider which creates <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> instances from
             an <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor"/>.
             </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following metadata:
             <code>
                 [Export(typeof(IAsyncCodeLensDataPointProvider))]
                 [Name]
                 [ContentType]
             </code>
            
             The following metadata are optional:
             <code>
                 [Priority]
                 [LocalizedName]
                 [OptionUserVisible]
                 [OptionUserModifiable]
             </code>
             </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider.CanCreateDataPointAsync(Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor,System.Threading.CancellationToken)">
            <summary>
            Determines if this provider can create an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> for the specified <see cref="T:Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor"/>.
            </summary>
            <param name="descriptor">The descriptor to check.</param>
            <returns>
            <c>true</c> if a data point can be created from the descriptor; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider.CreateDataPointAsync(Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor,System.Threading.CancellationToken)">
            <summary>
            Creates an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/>, on request, from a given descriptor.
            </summary>
            <param name="descriptor">The descriptor to use.</param>
            <returns>
            An <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> created from the descriptor.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProviderFactory">
            <summary>
            Represents a factory to discover <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider"/>s
            that are not exported as MEF component parts.
            </summary>
            <remarks>
            This is a MEF component part, and is imported by the CodeLens infrastructure as follows
            <code>
                [Import(typeof(ICodeLensDataPointProviderFactory))]
                ICodeLensDataPointProviderFactory providerFactory;
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProviderFactory.GetDataPointProvidersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider"/>s discoverable to this factory.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModelProvider">
            <summary>
            Interface for <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel"/> providers.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModelProvider.GetViewModel(Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint)">
            <summary>
            Gets view model for given data point
            </summary>
            <param name="dataPoint">Data point provided</param>
            <returns>Appropriate view model for the data point type</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel">
            <summary>
            A simple ViewModel for datapoints that provides a descriptor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel.DataPoint">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> used to create this view model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel.IsLoadingDetails">
            <summary>
            Indicates if the datapoint is actively loading detailed data
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel.DetailsFailureInfo">
            <summary>
            Contains any failure information if details were attempted to be loaded but failed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel.RefreshCommand">
            <summary>
            A Command that can be used to refresh this viewmodel
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel.AdditionalInformation">
            <summary>
            Gets the additional information to be shown about the data point (for example, in a tooltip).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensIntegerDataPointViewModel">
            <summary>
            View model for data points that wraps an integer value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensIntegerDataPointViewModel.Value">
            <summary>
            The integer value of the data point.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensGlyphDataPointViewModel">
            <summary>
            View model for a glyph data point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensGlyphDataPointViewModel.ImageId">
            <summary>
            Gets the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensGlyphDataPointViewModel.ImageId"/> of the glyph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensGlyphDataPointViewModel.ImageOpacity">
            <summary>
            Gets the opacity value of the glyph.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensIndicatorService">
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensIndicatorService.CreateIndicatorCollectionAsync(Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor,Microsoft.VisualStudio.Utilities.IContentType,System.Threading.CancellationToken)">
            <summary>
            Gets the data for a particular CodeLens descriptor from all of the providers that support that descriptor.
            </summary>
            <param name="descriptor">The descriptor describing what particular interesting document specific information is being asked for.</param>
            <returns>An enumerable of indicators, each of which contains unique a single data point</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensIndicatorService.GetAllDataPointProvidersAsync(System.Threading.CancellationToken)">
            <summary>
            Gets all <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider"/>s this service can discover.
            </summary>
            <returns>
            An enumerable of data point providers, along with their metadata coming from either MEF export metadata or provider factories. 
            </returns>
            <remarks>
            This method returns all <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider"/>s, including all MEF exported ones,
            as well as those that are provided through <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProviderFactory"/> objects.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensIndicatorService.GetDataProviderIndex(System.String)">
            <summary>
            Gets the index of the given data point provider within the ordered list of
            all providers.
            </summary>
            <param name="dataPointProviderName">The identifier of the data point provider
            to find the index of.</param>
            <returns>The index of the provider within the ordered list of providers,
            or -1 if the provider name does not match any known provider.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensIndicatorService.GetAccessKeySource(System.String)">
            <summary>
            Gets a bindable source for access keys for the given data point provider.
            </summary>
            <param name="dataPointProviderName">The identifier of the data point provider
            to find the access key source for.</param>
            <returns>The access key source for the data point provider, or null if the provider
            requested does not exist.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensIndicatorService.CreateIndicatorAsync(Microsoft.VisualStudio.Language.CodeLens.ICodeLensDescriptor,System.String,System.Threading.CancellationToken)">
            <summary>
            Get a particular CodeLensIndicator given the descriptor and the provider name
            </summary>
            <param name="descriptor">The descriptor describing what particular interesting document specific information is being asked for.</param>
            <param name="dataPointProviderName">The specific data point provider name</param>
            <param name="localizedName">The localized name of the provider</param>
            <returns>The indicator corresponding descriptor and the data point provider</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAccessKeySource">
            <summary>
            Represents a source for access keys related to a particular data point provider.  This
            source updates dynamically as access keys assigned to providers change.
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAccessKeySource.AccessKey">
            <summary>
            Gets the current access key for this source.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCache">
            <summary>
            Service which caches CodeLensAdornment instances.  Cached adornments can either
            be connected or disconnected (with cached UI data).
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCache.TryGetAdornment(Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag,Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment@)">
            <summary>
            Tries to get a cached adornment, if one exists.
            </summary>
            <param name="tag">The tag to get the cached adornment for.</param>
            <param name="adornment">The adornment, if one exists.</param>
            <returns>True if the cached adornment existed, otherwise false.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCache.GetOrCreateAdornmentAsync(Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag,Microsoft.VisualStudio.Utilities.IContentType,System.Threading.CancellationToken)">
            <summary>
            Gets or creates and caches an adornment.
            </summary>
            <param name="tag">The tag to get or create the cached adornment for.</param>
            <returns>The existing or new adornment.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCache.UpdateOrCacheAdornment(Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag,Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment)">
            <summary>
            Either updates the cache position or caches an existing CodeLensAdornment.
            </summary>
            <param name="tag">The tag to update or cache the adornment for.</param>
            <param name="adornment">The existing adornment associated with the tag.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCache.ExtendLifetime(Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag,Microsoft.VisualStudio.Language.Intellisense.CodeLensAdornment,System.Action)">
            <summary>
            Requests for the lifetime of an adornment to be extended.  While the lifetime is extended,
            the adornment should not become disconnected from its underlying data even if the adornment
            is otherwise removed from the UI.
            </summary>
            <param name="tag">The tag whose adornment should have its lifetime extended.</param>
            <param name="adornment">The existing adornment associated with the tag.</param>
            <param name="extensionEndedHandler">A callback which is invoked when the lifetime
            extension can no longer be maintained (for example, when the cache is full, or
            if the underlying tag is disconnected).</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCache.IsLifetimeExtended(Microsoft.VisualStudio.Language.CodeLens.ICodeLensTag)">
            <summary>
            Determines if the lifetime of an adornment is currently extended.
            </summary>
            <param name="tag">The tag to check the lifetime extension state of.</param>
            <returns>True if the adornment's lifetime is being extended by request, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCreationListener">
            <summary>
            Interface used by a MEF component to register a listener for CodeLensAdornment creation and destruction, e.g.
            
              [Export(typeof(ICodeLensAdornmentCreationListener))]
              class ListenerImpl : ICodeLensAdornmentCreationListener
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCreationListener.AdornmentShown(System.Windows.FrameworkElement)">
            <summary>
            Called each time an adornment FrameworkElement is placed into the editor.
            </summary>
            <param name="adornment">The UI element representing the new adornment.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentCreationListener.AdornmentHidden(System.Windows.FrameworkElement)">
            <summary>
            Called each time an adornment FrameworkElement is removed from the editor.
            </summary>
            <param name="adornment">The UI element representing the destroyed adornment.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentViewModel">
            <summary>
            View model for the adornment
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentViewModel.Indicators">
            <summary>
            Gets the collection of indicators presented in this adornment.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentViewModel.IsConnected">
            <summary>
            Gets whether or not the adornment is currently connected to
            live data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentViewModel.Disconnect">
            <summary>
            Disconnects the adornment, if it's currently connected.
            Disconnecting the adornment will disconnect each indicator, created
            cached data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentViewModel.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects the adornment, if it's currently disconnected.  Connecting
            the adornment will hook each indicator up to a live view model.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProviderMetadata">
            <summary>
            Metadata interface used for consuming <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider"/> imports.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProviderMetadata.Name">
            <summary>
            Gets the uniquely-identifying name of the data point provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProviderMetadata.LocalizedName">
            <summary>
            Gets the localized name of the data point provider.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProviderMetadata.ContentTypes">
            <summary>
            List of supported content types.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProviderMetadata.Priority">
            <summary>
            Gets the priority of the data point provider.  Lower value items will come first in
            the default ordering of data in the UI.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProviderMetadata.OptionUserModifiable">
            <summary>
            Determines if the user can modify the indicator option setting.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProviderMetadata.OptionUserVisible">
            <summary>
            Determines if the indicator option is visible.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelBase">
            <summary>
            A base interface for <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModel"/>.
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelBase.Descriptor">
            <summary>
            The description of the data point
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelBase.HasDetails">
            <summary>
            Indicates if the datapoint has details, so the indicator should appear as a link.  
            This does not indicate that detailed information is immediately available, only that details can be obtained.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelBase.HasData">
            <summary>
            Indicates if data is available for the datapoint
            </summary>
            <returns>
            <c>null</c> indicates that the value has not yet been set.
            <c>true</c> indicates that valid data exists.
            <c>false</c> indicates that data point has finished loading but that there is no data to return.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelBase.IsVisible">
            <summary>
            Indicates if indicator should be displayed for the datapoint
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDetailsTemplateProvider">
            <summary>
            Provides DetailsTemplates for a specific type of DataPoint
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDetailsTemplateProvider.DetailsTemplate">
            <summary>
            Gets the details template
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensEventHandler">
            <summary>
            Provides a generic event listener for tracking CodeLens actions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensEventHandler.OnIndicatorInvoked(System.String,System.Boolean)">
            <summary>
            Report a CodeLens indicator click.
            </summary>
            <param name="indicatorName">The name of the clicked indicator.</param>
            <param name="keyboardUsed">True if the keyboard was used to invoke the indicator.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensEventHandler.OnCodeLensOptionsChanged(System.Boolean,System.String[],System.String[])">
            <summary>
            Report a change to the CodeLens options.
            </summary>
            <remarks>Called initially with the current settings.</remarks>
            <param name="globalOption">Global CodeLens setting</param>
            <param name="enabledProviders">An array of all enabled provider names.</param>
            <param name="disabledProviders">An array of all disabled provider names.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensEventHandler.OnPinInvoked(System.String,System.Boolean,Microsoft.VisualStudio.Language.Intellisense.CodeLensPinEventArgs)">
            <summary>
            Report a CodeLens indicator was pinned.
            </summary>
            <param name="indicatorName">The name of the clicked indicator.</param>
            <param name="keyboardUsed">True if the keyboard was used to pin the indicator.</param>
            <param name="args">Arguments to recreate details popup content</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensEventManager">
            <summary>
            Provides a generic event manager for raising events to ICodeLensEventHandlers.
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensEventManager.OnIndicatorInvoked(System.String,System.Boolean)">
            <summary>
            Report a CodeLens indicator click.
            </summary>
            <param name="indicatorName">The name of the clicked indicator.</param>
            <param name="keyboardUsed">True if the keyboard was used to invoke the indicator.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensEventManager.OnPinInvoked(System.String,System.Boolean,Microsoft.VisualStudio.Language.Intellisense.CodeLensPinEventArgs)">
            <summary>
            Report a CodeLens indicator was pinned.
            </summary>
            <param name="indicatorName">The name of the clicked indicator.</param>
            <param name="keyboardUsed">True if the keyboard was used to pin the indicator.</param>
            <param name="args">Arguments to recreate details popup content</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicator">
            <summary>
            Represents the logic behind the UI presentation of a data point.  The indicator
            can either be connected to a data point (in which case its data is
            kept up-to-date) or disconnected (in which case its data is cached).
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicator.CodeLensDescriptor">
            <summary>
            Gets the descriptor used to create the data point which this indicator connects to.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicator.DataPointProviderName">
            <summary>
            Gets the name of the data point provider used to create the data point.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicator.ViewModelType">
            <summary>
            Gets the type of view model associated with this indicator.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicator.ViewModel">
            <summary>
            Gets the view model currently associated with this indicator,
            if the indicator is connected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicator.IsConnected">
            <summary>
            Gets whether or not this indicator is currently connected to a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicator.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects this indicator to its <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> if it's currently disconnected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicator.Disconnect">
            <summary>
            Disconnects this indicator from its <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPoint"/> if it's currently connnected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorCollection">
            <summary>
            Represents an observable collection of indicators.
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorCollection.Descriptor">
            <summary>
            Gets the descriptor associated with this collection of indicators.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorCollection.IsConnected">
            <summary>
            Gets whether or not this indicator collection is connected to live data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorCollection.Disconnect">
            <summary>
            Disconnects all of the indicators in this collection if they're currently connected.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorCollection.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects all of the indicators in this collection if they're currently disconnected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensAdornmentViewModelProvider">
            <summary>
            Provides view model for the adornments
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointTypeMetadata">
            <summary>
            Provides type information for a data point viewmodel provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointTypeMetadata.TargetDataPointTypeName">
            <summary>
            Gets the type of data point that a particular viewmodel provider supports
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelReference">
            <summary>
            Represents a disposable reference to an ICodeLensDataPointViewModel.  It's possible
            that the view model is shared between multiple sources, and only disposing all references
            will release the underlying view model.
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelReference.ViewModel">
            <summary>
            Gets the view model referenced by this object.  This view model
            is kept alive as long as this object is not disposed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelTypeMetadata">
            <summary>
            Provides type information for a template provider
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelTypeMetadata.TargetViewModelTypeName">
            <summary>
            Gets the type name of data point view model that a particular template provider supports.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorProvider">
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorTemplateProvider">
            <summary>
            Provides DataTemplates for a specific type of DataPoint
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorTemplateProvider.IndicatorTemplate">
            <summary>
            Gets the data point template
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CodeLensOptionBehaviorAttribute">
            <summary>
            A MEF attribute for providing the display status of a CodeLens indicator option.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CodeLensOptionBehaviorAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>
            CodeLensOptionBehaviorAttribute determines how the CodeLens indicator option is displayed
            to the user.
            </summary>
            <param name="modifiable">if <c>false</c> the option will appear grayed out</param>
            <param name="visible">if <c>false</c> the option will not be shown</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensOptionBehaviorAttribute.OptionModifiable">
            <summary>
            Gets whether or not the option's value can be modified. Editing the option is disabled if OptionModifiable is false
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CodeLensOptionBehaviorAttribute.OptionVisible">
            <summary>
            Gets the visibility state of the option.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPoint">
            <summary>
            Represents a single piece of data in CodeLens
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProvider">
            <summary>
            Represents a factory which can create <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPoint"/> instances from an
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDescriptor"/>.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attributes:
            [Export(typeof(ICodeLensDataPointProvider))]
            [Name]
            
            The [Order] attribute is optional, and can be used to order visualizations of this provider's
            data points relative to other providers.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProvider.CanCreateDataPoint(Microsoft.VisualStudio.Language.Intellisense.ICodeLensDescriptor)">
            <summary>
            Determines if this provider supports the descriptor given
            </summary>
            <param name="descriptor">The descriptor to check</param>
            <returns>True if a data point can be created from this descriptor, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProvider.CreateDataPoint(Microsoft.VisualStudio.Language.Intellisense.ICodeLensDescriptor)">
            <summary>
            Creates a data point from a given descriptor
            </summary>
            <param name="descriptor">The descriptor to use</param>
            <returns>A data point created from the descriptor</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModel">
            <summary>
            A simple ViewModel for datapoints that provides a descriptor
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModel.DataPoint">
            <summary>
            Gets the ICodeLensDataPoint used to create this view model.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModel.IsLoadingDetails">
            <summary>
            indicates if the datapoint is actively loading detailed data
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModel.DetailsFailureInfo">
            <summary>
            contains any failure information if details were attempted to be loaded but failed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModel.RefreshCommand">
            <summary>
            a Command that can be used to refresh this viewmodel
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModel.AdditionalInformation">
            <summary>
            Gets the additional information to be shown about the data point (for example, in a tooltip).
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelProvider">
            <summary>
            Interface for DataPointViewModel provider
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelProvider.GetViewModel(Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPoint)">
            <summary>
            Gets view model for given data point
            </summary>
            <param name="dataPoint">Data point provided</param>
            <returns>Appropriate view model for the data point type</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDescriptor.ElementDescription">
            <summary>
            A short description of the element for this descriptor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensGlyphDataPointViewModel">
            <summary>
            View model for a glyph data point
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensGlyphDataPointViewModel.GlyphSource">
            <summary>
            Gets the image source of the glyph.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensGlyphDataPointViewModel.GlyphOpacity">
            <summary>
            Gets the opacity of the glyph.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorService">
            <summary>
            CodeLens data provider aggregator.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorService.CreateIndicatorCollectionAsync(Microsoft.VisualStudio.Language.Intellisense.ICodeLensDescriptor)">
            <summary>
            Get the data for a particular CodeLens descriptor from all of the providers that support that descriptor.
            </summary>
            <param name="descriptor">The descriptor describing what particular interesting document specific information is being asked for.</param>
            <returns>An enumerable of indicators, each of which contains unique a single data point</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorService.GetDataProviderIndex(System.String)">
            <summary>
            Gets the index of the given data point provider within the ordered list of
            all providers.
            </summary>
            <param name="dataPointProviderName">The identifier of the data point provider
            to find the index of.</param>
            <returns>The index of the provider within the ordered list of providers,
            or -1 if the provider name does not match any known provider.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorService.GetAccessKeySource(System.String)">
            <summary>
            Gets a bindable source for access keys for the given data point provider.
            </summary>
            <param name="dataPointProviderName">The identifier of the data point provider
            to find the access key source for.</param>
            <returns>The access key source for the data point provider, or null if the provider
            requested does not exist.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIndicatorService.CreateIndicator(Microsoft.VisualStudio.Language.Intellisense.ICodeLensDescriptor,System.String,System.String@)">
            <summary>
            Get a particular CodeLensIndicator given the descriptor and the provider name
            </summary>
            <param name="descriptor">The descriptor describing what particular interesting document specific information is being asked for.</param>
            <param name="dataPointProviderName">The specific data point provider name</param>
            <param name="localizedName">The localized name of the provider</param>
            <returns>The indicator corresponding descriptor and the data point provider</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIntegerDataPointViewModel">
            <summary>
            View model for data points that wraps an integer value
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICodeLensIntegerDataPointViewModel.Value">
            <summary>
            The value of the data point
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICodeLensTag.Disconnected">
            <summary>
            Event raised when this tag has been disconnected and is no longer used as part of the editor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILegacyCodeLensDataPoint">
            <summary>
            A shimming interface to support legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPoint"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILegacyCodeLensDataPointSupport">
            <summary>
            Provides a mechanism to support the legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPoint"/> and <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProvider"/>
            in the infrastructure.
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILegacyCodeLensDataPointSupport.GetLegacyDataPointProviders">
            <summary>
            Discovers legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProvider"/>s and converts to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider"/>s.
            </summary>
            <returns>
            A collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointProvider"/>s converted from legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointProvider"/>s.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ILegacyCodeLensDataPointSupport.GetLegacyViewModelProviders">
            <summary>
            Discovers legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelProvider"/>s and converts to <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModelProvider"/>s.
            </summary>
            <returns>
            A collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IAsyncCodeLensDataPointViewModelProvider"/>s converted from legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModelProvider"/>s.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILegacyCodeLensDataPointViewModel">
            <summary>
            A shimming interface to support legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDataPointViewModel"/>.
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILegacyCodeLensDescriptor">
            <summary>
            A shimming interface to support legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensDescriptor"/>.
            </summary>
            <remarks>This is not intended to be used externally</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ILegacyCodeLensTag">
            <summary>
            A shimming interface to support legacy <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICodeLensTag"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.LocalizedNameAttribute">
            <summary>
            Represents an attribute which can provide a localized name as metadata for a MEF extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.LocalizedNameAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates an instance of this attribute, which caches the localized name represented
            by the given type and resource name.
            </summary>
            <param name="type">The type from which to load the localized resource.  This should
            be a type created by the resource designer.</param>
            <param name="resourceId">The name of the localized resource string contained the
            resource type.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.LocalizedNameAttribute.#ctor(System.Type,System.String,System.String)">
            <summary>
            Creates an instance of this attribute, which caches the localized name represented
            by the given type and resource name.
            </summary>
            <param name="type">The type from which to load the localized resource.</param>
            <param name="resourceStreamName">The base name of the resource stream containing the resource.</param>
            <param name="resourceId">The name of the localized resource string contained the
            resource type.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LocalizedNameAttribute.LocalizedName">
            <summary>
            Gets the localized name specified by the constructor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.PriorityAttribute">
            <summary>
            Represents an attribute which assigns an integer priority to a MEF component part.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.PriorityAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new instance of this attribute, assigning it a priority value.
            </summary>
            <param name="priority">The priority for the MEF component part.  Lower integer
            values represent higher precedence.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.PriorityAttribute.Priority">
            <summary>
            Gets the priority for the attributed MEF extension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.FocusMovingGrid">
            <summary>
            a focusable grid, with no focusvisualstyle and whenever it gets keyboard focus, attempts to move focus to the next focusable item.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession2.Matched">
            <summary>
            Raised following a call to <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Match"/>.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession2.Filtered">
            <summary>
            Raised after <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Filter"/> was executed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IVSAccessKeyManagerInternal">
            <summary>
            Allows to register and listen to access keys in VS.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IVSAccessKeyManagerInternal.RegisterAccessKey(System.String,System.Windows.IInputElement,System.Windows.PresentationSource)">
            <summary>
            Register for an access key in VS.
            </summary>
            <param name="key">The access key to be registered</param>
            <param name="currentElement">The wpf element that is trying to register.</param>
            <param name="presentationSource">The presentation source of the element that is being used to register the access key</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IVSAccessKeyManagerInternal.UnRegisterAccessKey(System.String,System.Windows.IInputElement,System.Windows.PresentationSource)">
            <summary>
            Disassociates the specified access keys from the specified element
            </summary>
            <param name="key">The access key to be registered</param>
            <param name="currentElement">The wpf element that is trying to register.</param>
            <param name="presentationSource">The presentation source of the element that is being used to register the access key</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IVSAccessKeyManagerInternal.AddVSAccessKeyPressedHandler(System.Windows.IInputElement,System.Windows.PresentationSource,System.Windows.Input.AccessKeyPressedEventHandler)">
            <summary>
            Adds a handler for the AccessKeyPressed attached event.
            </summary>
            <param name="currentElement">The wpf element that is trying to register.</param>
            <param name="presentationSource">The presentation source of the element that is being used to register the access ke</param>
            <param name="onAccessKeyPressedHandler">The event handler that will be called when the access key is pressed. You should mark the event handled if your conditions are satisfied and then mark yourself as the target so that OnAccessKey Event is then called for your target.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IVSAccessKeyManagerInternal.RemoveVSAccessKeyPressedHandler(System.Windows.IInputElement,System.Windows.PresentationSource,System.Windows.Input.AccessKeyPressedEventHandler)">
            <summary>
            Removes the specified AccessKeyPressed event handler from the specified object.
            </summary>
            <param name="currentElement">The wpf element that is trying to register.</param>
            <param name="presentationSource">The presentation source of the element that is being used to register the access ke</param>
            <param name="onAccessKeyPressedHandler">The event handler that will be called when the access key is pressed. You should mark the event handled if your conditions are satisfied and then mark yourself as the target so that OnAccessKey Event is then called for your target.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IVSAccessKeyManagerInternal.IsVSAccessKeyRegisteredByElement(System.Windows.IInputElement,System.String)">
            <summary>
            Indicates whether the specified key is registered as an access keys for this specific element.
            </summary>
            <param name="element">The object on which the query is made. It is usually the input element to which the key is registered</param>
            <param name="key">The key you want to query</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IVSAccessKeyManagerInternal.IsVSAccessKeyRegistered(System.String)">
            <summary>
            Indicates whether the specified key is registered as an access key.
            </summary>
            <param name="key">The key you want to query</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase">
            <summary>
            A base implementation for legacy LightBulb providers not supporting ImageMonikers.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.HasActionSets">
            <summary>
            Gets whether this action has nested suggested action sets. See <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction.HasActionSets"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.GetActionSetsAsync(System.Threading.CancellationToken)">
            <summary>
            Gets a list of nested sets of suggested actions.
            </summary>
            <returns>A task whose result is either a list of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSet"/>s representing nested suggested actions, 
            or null if this <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction"/> instance has no nested suggested actions.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.DisplayText">
            <summary>
            Gets the localized text representing the suggested action.
            </summary>
            <remarks>This property should never be null.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.IconMoniker">
            <summary>
            Gets an optional icon representing the suggested action or null if this suggested
            action doesn't have an icon.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.IconSource">
            <summary>
            Gets an optional icon representing the suggested action as <see cref="T:System.Windows.Media.ImageSource"/> or null if this suggested
            action doesn't have an icon.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.IconAutomationText">
            <summary>
            Gets the text to be used as the automation name for the icon when it's displayed.
            </summary>
            <remarks>For accesibility reasons this property should not be null if the icon is specified.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.InputGestureText">
            <summary>
            Gets the text describing an input gesture that will apply the suggested action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.HasPreview">
            <summary>
            Gets whether this suggested action can provide a preview via <see cref="M:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.GetPreviewAsync(System.Threading.CancellationToken)"/> method call.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.GetPreviewAsync(System.Threading.CancellationToken)">
            <summary>
            Gets an object visually representing a preview of the suggested action.  
            </summary>
            <param name="cancellationToken">A cancellation token that allows to cancel preview creation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.Invoke(System.Threading.CancellationToken)">
            <summary>
            Invokes the suggested action.
            </summary>
            <param name="cancellationToken">A cancellation token that allows cancel of action invocation.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.Dispose">
            <summary>
            Disposes this action.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.LegacySuggestedActionBase.TryGetTelemetryId(System.Guid@)">
            <summary>
            Provides telemetry ID for this suggested action.
            </summary>
            <param name="telemetryId"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.NativeMethods.WINDOWPOS">
            <summary>
            Win32 WINDOWPOS struct
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.NativeMethods.POINT">
            <summary>
            A point structure to match the Win32 POINT
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.NativeMethods.RECT">
            <summary>
            A rect structure to match the Win32 RECT
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.NativeMethods.MONITORINFO">
            <summary>
            Win32 MONITORINFO Struct
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.VisualTreeExtensions.GetVisualOrLogicalParent(System.Windows.DependencyObject)">
            <summary>
            This uses the visual tree first, then diverts to the logical tree if the visual tree ends.
            This is necessary for the TabControl, where using either the logical tree or visual tree
            by themselves is insufficient.
            </summary>
            <param name="sourceElement">The object to begin searching from.</param>
            <returns>The visual tree parent of the object, or the logical tree parent if
            the visual tree parent is null, or null if the logical tree parent is null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.VisualTreeExtensions.FindAncestorOrSelf``1(System.Windows.Media.Visual)">
            <summary>
            Helper method that finds the first ancestor of a given Type in the
            logical or visual tree, or the object itself if it matches in type.
            </summary>
            <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
            <param name="element">The object at which to begin searching.</param>
            <returns>The object itself, if it matches in type, else the first ancestor of type T in the parent chain of obj,
            or null if no ancestor is found.</returns>
            <remarks>
            The type of <paramref name="element"/> is Visual rather than DependencyObject in order to disambiguate this method 
            from Microsoft.VisualStudio.PlatformUI.Shell.ExtensionMethods.FindAncestor(ViewElement element).  If you need
            to find an ancestor of a non-Visual DependencyObject you should call 
            FindAncestor&lt;TAncestorType, DependencyObject&gt;(obj, GetVisualOrLogicalParent) directly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.VisualTreeExtensions.FindAncestorOrSelf``2(``1,System.Func{``1,``1})">
            <summary>
            Helper method that finds the first ancestor of a given Type in the
            logical or visual tree, or the object itself if it matches in type.
            </summary>
            <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
            <typeparam name="TElementType">The base type of intermediate elements in the ancestor tree.</typeparam>
            <param name="element">The object at which to begin searching.</param>
            <returns>The object itself, if it matches in type, else the first ancestor of type T in the parent chain of obj,
            or null if no ancestor is found.</returns>
            <remarks>
            The type of <paramref name="element"/> is Visual rather than DependencyObject in order to disambiguate this method 
            from Microsoft.VisualStudio.PlatformUI.Shell.ExtensionMethods.FindAncestor(ViewElement element).  If you need
            to find an ancestor of a non-Visual DependencyObject you should call 
            FindAncestor&lt;TAncestorType, DependencyObject&gt;(obj, GetVisualOrLogicalParent) directly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.VisualTreeExtensions.FindAncestorOrSelf``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Helper method that finds the first ancestor in the logical or visual tree, or the object itself, that is accepted by the ancestor selector function.
            </summary>
            <param name="element">The object at which to begin searching.</param>
            <param name="parentEvaluator">The method used to determine the parent of an element.</param>
            <param name="ancestorSelector">The method used to select an ancestor of interest.</param>
            <typeparam name="TElementType">The base type of intermediate elements in the ancestor tree.</typeparam>
            <returns>The first ancestor in the parent chain of obj accepted by the the ancestor selector function, or null if no ancestor is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.VisualTreeExtensions.FindAncestor``1(System.Windows.Media.Visual)">
            <summary>
            Helper method that finds the first ancestor of a given Type in the
            logical or visual tree.
            </summary>
            <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
            <param name="visual">The object at which to begin searching.</param>
            <returns>The first ancestor of type T in the parent chain of obj, or null
            if no ancestor is found.</returns>
            <remarks>
            The type of <paramref name="visual"/> is Visual rather than DependencyObject in order to disambiguate this method 
            from Microsoft.VisualStudio.PlatformUI.Shell.ExtensionMethods.FindAncestor(ViewElement element).  If you need
            to find an ancestor of a non-Visual DependencyObject you should call 
            FindAncestor&lt;TAncestorType, DependencyObject&gt;(obj, GetVisualOrLogicalParent) directly.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.VisualTreeExtensions.FindAncestor``2(``1,System.Func{``1,``1})">
            <summary>
            Helper method that finds the first ancestor of a given Type in the
            logical or visual tree.
            </summary>
            <typeparam name="TAncestorType">The type of ancestor to find.</typeparam>
            <typeparam name="TElementType">The base type of intermediate elements in the ancestor tree.</typeparam>
            <param name="element">The object at which to begin searching.</param>
            <param name="parentEvaluator">The method used to determine the parent of an element.</param>
            <returns>The first ancestor of type T in the parent chain of obj, or null
            if no ancestor is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.VisualTreeExtensions.FindAncestor``1(``0,System.Func{``0,``0},System.Func{``0,System.Boolean})">
            <summary>
            Helper method that finds the first ancestor in the logical or visual tree that is accepted by the ancestor selector function.
            </summary>
            <param name="element">The object at which to begin searching.</param>
            <param name="parentEvaluator">The method used to determine the parent of an element.</param>
            <param name="ancestorSelector">The method used to select an ancestor of interest.</param>
            <typeparam name="TElementType">The base type of intermediate elements in the ancestor tree.</typeparam>
            <returns>The first ancestor in the parent chain of obj accepted by the the ancestor selector function.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Utilities.IWaitIndicator.Wait(System.String,System.String,System.Boolean,System.Action{Microsoft.VisualStudio.Language.Intellisense.Utilities.IWaitContext})">
            <summary>
            Schedule the action on the caller's thread and wait for the task to complete.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.RestoreFocusScope">
            <summary>
            Scope used to store information about an IInputElement
            to which focus should be restored at the end of the scope.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.RestoreFocusScope.PerformRestoration">
            <summary>
            Restores focus to the correct element.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.RestoreFocusScope.RestoreFocus">
            <summary>
            Preserve and retrieve the IInputElement for focus restoration.
            When stored, all ancestors are remembered (as they could potentially become focusable later).
            When retrieved, only the top item still focusable and connected to the presentation source is returned.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.Test.ICodeLensAdornment_Test">
            <summary>
            Interface used by tests to interact with code sense adornment instances in the editor.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Test.ICodeLensAdornment_Test.Point">
            <summary>
            Gets the ITrackingPoint at which the adornment was placed inside the editor.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.Test.ICompletionSession_Test">
            <summary>
            Test contract for ICompletionSession.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Test.ICompletionSession_Test.TriggerSessionMatch">
            <summary>
            Triggers the session match.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.AsyncTaskEventArgs">
            <summary>
            Represents the event arguments for when a task is started or finished with the AsyncTaskManager.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.AsyncTaskEventArgs.Id">
            <summary>
            Gets the id of the async operation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.AsyncTaskEventArgs.Task">
            <summary>
            Gets the task representing the async operation.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.AsyncTaskManager">
            <summary>
            Provides the ability to track and cancel Tasks.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.AsyncTaskManager.HasPendingTasksChanged">
            <summary>
            Occurs when the value of the HasPendingTasks property changes.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.AsyncTaskManager.AsyncTaskStarted">
            <summary>
            Occurs when an async task starts.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Utilities.AsyncTaskManager.AsyncTaskFinished">
            <summary>
            Occurs when an async task finishes.
            </summary>
            <remarks>
            This event will be raised even if the task is cancelled or faulted.
            Check eventArgs.Task.IsCompleted/IsCanceled/IsFaulted to determine the state of the finished task.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.AsyncTaskManager.HasPendingTasks">
            <summary>
            Determines whether any tasks exist that have started but not finished.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.Run``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Runs and tracks the specified function.
            </summary>
            <typeparam name="T">The type returned from the specified function.</typeparam>
            <param name="function">The function to run.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.Run``1(System.Object,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Runs and tracks the specified function.
            </summary>
            <typeparam name="T">The type returned from the specified function.</typeparam>
            <param name="id">A unique identifier for the async operation, which can be used to retrieve or cancel the operation later.</param>
            <param name="function">The function to run.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            A previous run of an operation uniquely identified by <paramref name="id"/> is still in progress.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.Run``1(System.Object,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Runs and tracks the specified function.
            </summary>
            <typeparam name="T">The type returned from the specified function.</typeparam>
            <param name="id">A unique identifier for the async operation, which can be used to retrieve or cancel the operation later.</param>
            <param name="function">The function to run.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            A previous run of an operation uniquely identified by <paramref name="id"/> is still in progress.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.GetOrRun``1(System.Object,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Gets the existing specified task, or runs a new one.
            </summary>
            <typeparam name="T">The type returned from the specified function.</typeparam>
            <param name="id">A unique identifier for the async operation, which can be used to retrieve or cancel the operation later.</param>
            <param name="function">The function to run.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            A previous run of an operation uniquely identified by <paramref name="id"/> is still in progress.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.GetOrRun``1(System.Object,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the existing specified task, or runs a new one.
            </summary>
            <typeparam name="T">The type returned from the specified function.</typeparam>
            <param name="id">A unique identifier for the async operation, which can be used to retrieve or cancel the operation later.</param>
            <param name="function">The function to run.</param>
            <param name="persistCompleted">Persist the task if it runs to completion.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            A previous run of an operation uniquely identified by <paramref name="id"/> is still in progress.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.Run(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Runs and tracks the specified task.
            </summary>
            <param name="function">The function to run.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.Run(System.Object,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Runs and tracks the specified task.
            </summary>
            <param name="id">A unique identifier for the async operation, which can be used to retrieve or cancel the operation later.</param>
            <param name="function">The function to run.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            A previous run of an operation uniquely identified by <paramref name="id"/> is still in progress.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.Run(System.Object,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Runs and tracks the specified task.
            </summary>
            <param name="id">A unique identifier for the async operation, which can be used to retrieve or cancel the operation later.</param>
            <param name="function">The function to run.</param>
            <param name="persistCompleted">Persist the task if it runs to completion.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            A previous run of an operation uniquely identified by <paramref name="id"/> is still in progress.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.GetOrRun(System.Object,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Gets the existing specified task, or runs a new one.
            </summary>
            <param name="id">A unique identifier for the async operation, which can be used to retrieve or cancel the operation later.</param>
            <param name="function">The function to run.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            A previous run of an operation uniquely identified by <paramref name="id"/> is still in progress.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.GetOrRun(System.Object,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the existing specified task, or runs a new one.
            </summary>
            <param name="id">A unique identifier for the async operation, which can be used to retrieve or cancel the operation later.</param>
            <param name="function">The function to run.</param>
            <param name="persistCompleted">Persist the task if it runs to completion.</param>
            <param name="cancellationToken">A caller specified CancellationToken.</param>
            <returns>A task representing the async operation.</returns>
            <exception cref="T:System.InvalidOperationException">
            A previous run of an operation uniquely identified by <paramref name="id"/> is still in progress.
            </exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.Cancel(System.Object)">
            <summary>
            Cancels the specified async operation using the unique identifier.
            </summary>
            <param name="id">The unique identifier for the async operation to be canceled.</param>
            <returns>A task that will complete when the specified operation finishes cancelling.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.CancelAll">
            <summary>
            Cancels all pending async operations.
            </summary>
            <returns>A task that will complete when all pending operations finish cancelling.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.Remove(System.Object)">
            <summary>
            Cancel the specified async operation and remove it if it was persisted.
            </summary>
            <param name="id">The unique identifier for the async operation to be removed.</param>
            <returns>A Task that will complete when specified operation is cancelled and removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.RemoveAll">
            <summary>
            Cancels all pending async operations and remove any persisted ones.
            </summary>
            <returns>A Task that will complete when all pending operations finish cancelling and all persisted ones are removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.GetAllTasks">
            <summary>
            Gets all pending async operations.
            </summary>
            <returns>
            All the pending async operations.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.GetTask(System.Object)">
            <summary>
            Gets the specified pending async operation.
            </summary>
            <param name="id">The unique identifier for the async operation.</param>
            <returns>
            The task tracked by the identifier.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.AsyncTaskManager.IsTaskPending(System.Object)">
            <summary>
            Determines whether the specified async operation is currently pending.
            </summary>
            <param name="id">The unique identifier for the async operation.</param>
            <returns>True if the specified async operation is pending, otherwise false.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.TplTaskExtensions">
            <summary>
            Some extension methods to <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.TplTaskExtensions.IgnoreCancellation(System.Threading.Tasks.Task)">
            <summary>
            Ignores all cancellation exceptions from the task.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.TplTaskExtensions.FireAndForget(System.Threading.Tasks.Task)">
            <summary>
            Fire and forget. Ignores all cancellations.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.TplTaskExtensions.RemoveCancellationExceptions(System.AggregateException)">
            <summary>
            Removes all the OperationCanceledException objects from the passed in AggregateException.
            </summary>
            <param name="aggregateException">
            The AggregateException to remove the OperationCanceledException objects.
            </param>
            <remarks>
            If aggregateException only contains OperationCanceledExceptions, this method will return null.
            </remarks>
            <returns>
            A copy of the passed in AggregateException with all OperationCanceledExceptions removed.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.TplTaskExtensions.FilterNonCancellationExceptions(System.AggregateException)">
            <summary>
            Filters inner exceptions that are not OperationCanceledException from the passed in aggregateException.
            </summary>
            <returns>A collection of Exceptions from the passed in aggregateException but with cancellations removed.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IObjectTracker">
            <summary>
            Describes a tracker of in-memory objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IObjectTracker.TrackObject(System.Object,System.String)">
            <summary>
            Begins tracking an object.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to track.</param>
            <param name="bucketName">The name of the bucket in which to track this <see cref="T:System.Object"/> reference.</param>
            <remarks>Object trackers</remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.JoinableTaskHelper">
            <summary>
            A helper for managing JoinableTasks.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
